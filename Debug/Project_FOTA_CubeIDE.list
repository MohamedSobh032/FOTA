
Project_FOTA_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800203c  0800203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002178  08002178  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002178  08002178  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002178  08002178  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800217c  0800217c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000054  080021d4  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080021d4  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001df2  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000964  00000000  00000000  00021eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c8  00000000  00000000  00022820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f5  00000000  00000000  00022ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000207b  00000000  00000000  00022cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f40  00000000  00000000  00024d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a1ca  00000000  00000000  00026c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d68  00000000  00000000  00030e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00031bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000054 	.word	0x20000054
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002024 	.word	0x08002024

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000058 	.word	0x20000058
 80001d4:	08002024 	.word	0x08002024

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <MFMI_vInit>:
/* Func. Name: MFMI_vInit                        */
/* i/p arguments: nothing 					     */
/* o/p arguments: nothing                        */
/* Desc. : This API initializes the Flash Driver */
/*************************************************/
void MFMI_vInit(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* Unlock the Flash */
	Private_vFlashUnlock();
 80009b8:	f000 f866 	bl	8000a88 <Private_vFlashUnlock>
	/* Set the Programming Size */
	WRITE_BITS(FMI->CR,MFMI_PROGRAM_SIZE,TWO_BITS,MFMI_CR_PSIZE_BIT);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MFMI_vInit+0x20>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <MFMI_vInit+0x20>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	6113      	str	r3, [r2, #16]
	/* Lock the Flash */
	Private_vFlashLock();
 80009cc:	f000 f84c 	bl	8000a68 <Private_vFlashLock>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <MFMI_vProgram>:
/* i/p arguments: Copy_u16Length: Array Size 									 */
/* o/p arguments: nothing                              				   			 */
/* Desc. : This API Flashes an Array at a Specific Address 			   			 */
/*********************************************************************************/
void MFMI_vProgram(u32 Copy_u32Address, u16* Copy_u16DataToBeWritten, u16 Copy_u16Length)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]
	/* Wait for the Flash to be not Busy */
	while(GET_BIT(FMI->SR,MFMI_SR_BSY_BIT));
 80009e6:	bf00      	nop
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MFMI_vProgram+0x8c>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f9      	bne.n	80009e8 <MFMI_vProgram+0x10>
	/* Unlock the Flash */
	Private_vFlashUnlock();
 80009f4:	f000 f848 	bl	8000a88 <Private_vFlashUnlock>
	/* Select Programming Operation */
	SET_BIT(FMI->CR,MFMI_CR_PG_BIT);
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MFMI_vProgram+0x8c>)
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <MFMI_vProgram+0x8c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6113      	str	r3, [r2, #16]
	/* Write The Data to be Written */
	u16 Local_u16Counter = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	82fb      	strh	r3, [r7, #22]
	for (Local_u16Counter = 0; Local_u16Counter < Copy_u16Length; Local_u16Counter++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	82fb      	strh	r3, [r7, #22]
 8000a0c:	e019      	b.n	8000a42 <MFMI_vProgram+0x6a>
	{
		*(volatile u16*)Copy_u32Address = Copy_u16DataToBeWritten[Local_u16Counter];
 8000a0e:	8afb      	ldrh	r3, [r7, #22]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	441a      	add	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	8812      	ldrh	r2, [r2, #0]
 8000a1a:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3302      	adds	r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]
		/* Wait for the Flash to be not Busy */
		while(GET_BIT(FMI->SR,MFMI_SR_BSY_BIT));
 8000a22:	bf00      	nop
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MFMI_vProgram+0x8c>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f9      	bne.n	8000a24 <MFMI_vProgram+0x4c>
		/* Clear EOP by Writing 1 */
		SET_BIT(FMI->SR,MFMI_SR_EOP_BIT);
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MFMI_vProgram+0x8c>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MFMI_vProgram+0x8c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	60d3      	str	r3, [r2, #12]
	for (Local_u16Counter = 0; Local_u16Counter < Copy_u16Length; Local_u16Counter++)
 8000a3c:	8afb      	ldrh	r3, [r7, #22]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	82fb      	strh	r3, [r7, #22]
 8000a42:	8afa      	ldrh	r2, [r7, #22]
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d3e1      	bcc.n	8000a0e <MFMI_vProgram+0x36>
	}
	/* Deselect Programming Operation */
	CLR_BIT(FMI->CR,MFMI_CR_PG_BIT);
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MFMI_vProgram+0x8c>)
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <MFMI_vProgram+0x8c>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6113      	str	r3, [r2, #16]
	/* Lock the Flash */
	Private_vFlashLock();
 8000a56:	f000 f807 	bl	8000a68 <Private_vFlashLock>
}
 8000a5a:	bf00      	nop
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <Private_vFlashLock>:
/* i/p arguments: nothing 		    */
/* o/p arguments: nothing           */
/* Desc. : This API Locks the Flash */
/************************************/
static void Private_vFlashLock()
{ SET_BIT(FMI->CR,MFMI_CR_LOCK_BIT); }
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <Private_vFlashLock+0x1c>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <Private_vFlashLock+0x1c>)
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	6113      	str	r3, [r2, #16]
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <Private_vFlashUnlock>:
/* i/p arguments: nothing 		      */
/* o/p arguments: nothing             */
/* Desc. : This API Unlocks the Flash */
/**************************************/
static void Private_vFlashUnlock()
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	FMI->KEYR = MFMI_KEYR_KEY1;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <Private_vFlashUnlock+0x1c>)
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <Private_vFlashUnlock+0x20>)
 8000a90:	605a      	str	r2, [r3, #4]
	FMI->KEYR = MFMI_KEYR_KEY2;
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <Private_vFlashUnlock+0x1c>)
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <Private_vFlashUnlock+0x24>)
 8000a96:	605a      	str	r2, [r3, #4]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00
 8000aa8:	45670123 	.word	0x45670123
 8000aac:	cdef89ab 	.word	0xcdef89ab

08000ab0 <MGPIO_vSetPinMode>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15       */
/* i/p arguments: Copy_u8Mode: MGPIO_MODE_<Mode Type>             */
/* o/p arguments: nothing                                         */
/* Desc. : This API Allows User to Set the mode of a Specific Pin */
/******************************************************************/
void MGPIO_vSetPinMode(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Mode) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
 8000abc:	4613      	mov	r3, r2
 8000abe:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 8000ac0:	78bb      	ldrb	r3, [r7, #2]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d813      	bhi.n	8000aee <MGPIO_vSetPinMode+0x3e>
    WRITE_BITS(GPIOx->MODER, Copy_u8Mode, TWO_BITS, Copy_GPIOPin * 2);
 8000ac6:	78ba      	ldrb	r2, [r7, #2]
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2103      	movs	r1, #3
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	ea40 0203 	orr.w	r2, r0, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e000      	b.n	8000af0 <MGPIO_vSetPinMode+0x40>
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 8000aee:	bf00      	nop
}
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <MGPIO_vSetPinOutputType>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15              */
/* i/p arguments: Copy_u8Type: MGPIO_OUTPUT_TYPE_<Output Type>           */
/* o/p arguments: nothing                                                */
/* Desc. : This API Allows User to Set the Output Type of a Specific Pin */
/*************************************************************************/
void MGPIO_vSetPinOutputType(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8OType) {
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
 8000b06:	4613      	mov	r3, r2
 8000b08:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8OType > MGPIO_OUTPUT_TYPE_OD) { return; /* Do Nothing */ }
 8000b0a:	78bb      	ldrb	r3, [r7, #2]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d811      	bhi.n	8000b34 <MGPIO_vSetPinOutputType+0x3a>
    WRITE_BITS(GPIOx->OTYPER, Copy_u8OType, ONE_BIT, Copy_GPIOPin);
 8000b10:	78ba      	ldrb	r2, [r7, #2]
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	ea40 0203 	orr.w	r2, r0, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	e000      	b.n	8000b36 <MGPIO_vSetPinOutputType+0x3c>
    if (Copy_u8OType > MGPIO_OUTPUT_TYPE_OD) { return; /* Do Nothing */ }
 8000b34:	bf00      	nop
}
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <MGPIO_vSetPinOutputSpeed>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15               */
/* i/p arguments: Copy_u8Speed: MGPIO_<Speed>_SPEED                       */
/* o/p arguments: nothing                                                 */
/* Desc. : This API Allows User to Set the Output Speed of a Specific Pin */
/**************************************************************************/
void MGPIO_vSetPinOutputSpeed(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Speed) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Speed > MGPIO_VHIGH_SPEED) { return; /* Do Nothing */ }
 8000b50:	78bb      	ldrb	r3, [r7, #2]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d813      	bhi.n	8000b7e <MGPIO_vSetPinOutputSpeed+0x3e>
    WRITE_BITS(GPIOx->OSPEEDR, Copy_u8Speed, TWO_BITS, Copy_GPIOPin * 2);
 8000b56:	78ba      	ldrb	r2, [r7, #2]
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4013      	ands	r3, r2
 8000b74:	ea40 0203 	orr.w	r2, r0, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e000      	b.n	8000b80 <MGPIO_vSetPinOutputSpeed+0x40>
    if (Copy_u8Speed > MGPIO_VHIGH_SPEED) { return; /* Do Nothing */ }
 8000b7e:	bf00      	nop
}
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <MGPIO_vSetPinAFDirection>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15                   */
/* i/p arguments: Copy_GPIOPinDirection: MGPIO_AF00 --> MGPIO_AF15            */
/* o/p arguments: nothing                                                     */
/* Desc. : This API Allows User to Set the Direction of AF for a Specific Pin */
/******************************************************************************/
void MGPIO_vSetPinAFDirection(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, MGPIO_AF Copy_GPIOAFDir) {
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70fb      	strb	r3, [r7, #3]
 8000b96:	4613      	mov	r3, r2
 8000b98:	70bb      	strb	r3, [r7, #2]
    if (Copy_GPIOPin <= MGPIO_PIN07) { WRITE_BITS(GPIOx->AFRL, Copy_GPIOAFDir, FOUR_BITS, Copy_GPIOPin * 4); }
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b07      	cmp	r3, #7
 8000b9e:	d813      	bhi.n	8000bc8 <MGPIO_vSetPinAFDirection+0x3e>
 8000ba0:	78ba      	ldrb	r2, [r7, #2]
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a1a      	ldr	r2, [r3, #32]
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	ea40 0203 	orr.w	r2, r0, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	621a      	str	r2, [r3, #32]
    else		 					 { WRITE_BITS(GPIOx->AFRH, Copy_GPIOAFDir, FOUR_BITS, (Copy_GPIOPin - 8) * 4); }
}
 8000bc6:	e014      	b.n	8000bf2 <MGPIO_vSetPinAFDirection+0x68>
    else		 					 { WRITE_BITS(GPIOx->AFRH, Copy_GPIOAFDir, FOUR_BITS, (Copy_GPIOPin - 8) * 4); }
 8000bc8:	78ba      	ldrb	r2, [r7, #2]
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	3b08      	subs	r3, #8
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	210f      	movs	r1, #15
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	4013      	ands	r3, r2
 8000bea:	ea40 0203 	orr.w	r2, r0, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <MGPIO_vSetPinValue>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15        */
/* i/p arguments: Copy_GPIOPinValue: MGPIO_OUTPUT_<Output Value>   */
/* o/p arguments: nothing                                          */
/* Desc. : This API Allows User to Set the Value of a Specific Pin */
/*******************************************************************/
void MGPIO_vSetPinValue(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Value) {
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	70bb      	strb	r3, [r7, #2]
    if      (Copy_u8Value == MGPIO_OUTPUT_HIGH) { SET_BIT(GPIOx->ODR, Copy_GPIOPin); }
 8000c0e:	78bb      	ldrb	r3, [r7, #2]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d109      	bne.n	8000c28 <MGPIO_vSetPinValue+0x2a>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	78fa      	ldrb	r2, [r7, #3]
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	615a      	str	r2, [r3, #20]
    else if	(Copy_u8Value == MGPIO_OUTPUT_LOW)  { CLR_BIT(GPIOx->ODR, Copy_GPIOPin); }
}
 8000c26:	e00c      	b.n	8000c42 <MGPIO_vSetPinValue+0x44>
    else if	(Copy_u8Value == MGPIO_OUTPUT_LOW)  { CLR_BIT(GPIOx->ODR, Copy_GPIOPin); }
 8000c28:	78bb      	ldrb	r3, [r7, #2]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d109      	bne.n	8000c42 <MGPIO_vSetPinValue+0x44>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	78fa      	ldrb	r2, [r7, #3]
 8000c34:	2101      	movs	r1, #1
 8000c36:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3a:	43d2      	mvns	r2, r2
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	615a      	str	r2, [r3, #20]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <MRCC_vInitSysAndBusClock>:
/* Func. Name: MRCC_vInitSysAndBusClock 						  */
/* i/p arguments: nothing              	   						  */
/* o/p arguments: nothing              							  */
/* Desc. : This API Initializes the The System CLK and Busses CLK */
/******************************************************************/
void MRCC_vInitSysAndBusClock() {
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	#if MRCC_SYSTEM_CLOCK_SOURCE == MRCC_HSI_CLK_SOURCE
		/* Enable HSI */
		SET_BIT(RCC_CR, MRCC_CR_HSION_BIT);
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MRCC_vInitSysAndBusClock+0x6c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <MRCC_vInitSysAndBusClock+0x6c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
		/* Trim HSI */
		WRITE_BITS(RCC_CR, MRCC_HSI_TRIMMING, FIVE_BITS, MRCC_CR_HSITRIM_BIT);
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MRCC_vInitSysAndBusClock+0x6c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <MRCC_vInitSysAndBusClock+0x6c>)
 8000c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6e:	6013      	str	r3, [r2, #0]
		/* Switch System Clock to HSI */
		WRITE_BITS(RCC_CFGR, MRCC_SW_SWITCH_TO_HSI, TWO_BITS, MRCC_CFGR_SW_BIT);
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	6013      	str	r3, [r2, #0]
		/* booling till HSI is Stable */
		while(!GET_BIT(RCC_CR, MRCC_CR_HSIRDY_BIT));
 8000c7c:	bf00      	nop
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MRCC_vInitSysAndBusClock+0x6c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <MRCC_vInitSysAndBusClock+0x2e>
		while(!GET_BIT(RCC_CR, MRCC_CR_PLLRDY_BIT));
	#else
		#warning "Invalid Clock Source Configuration!"
	#endif
	/* Set the AHB Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_AHB_PRESCALER, FOUR_BITS, MRCC_CFGR_HPRE_BIT);
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	6013      	str	r3, [r2, #0]
	/* Set the APB1 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB1_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE1_BIT);
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000ca0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ca4:	6013      	str	r3, [r2, #0]
	/* Set the APB2 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB2_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE2_BIT);
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <MRCC_vInitSysAndBusClock+0x70>)
 8000cac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cb0:	6013      	str	r3, [r2, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40023808 	.word	0x40023808

08000cc4 <MRCC_vEnablePeriphClock>:
/* i/p arguments: Copy_BusID: MRCC_BUS_AHB1 -->  MRCC_BUS_APB2LP             */
/* i/p arguments: Copy_PeriphID: <PeripheralName>EN || <PeripheralName>LPEN  */
/* o/p arguments: nothing                                                    */
/* Desc. : This API Allows the User to Enable CLK for a Specific Peripheral  */
/*****************************************************************************/
void MRCC_vEnablePeriphClock(MRCC_BUS Copy_BusID, MRCC_PeriphClock Copy_PeriphID) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	switch (Copy_BusID) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d86a      	bhi.n	8000db0 <MRCC_vEnablePeriphClock+0xec>
 8000cda:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <MRCC_vEnablePeriphClock+0x1c>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000d01 	.word	0x08000d01
 8000ce4:	08000d17 	.word	0x08000d17
 8000ce8:	08000d2d 	.word	0x08000d2d
 8000cec:	08000d43 	.word	0x08000d43
 8000cf0:	08000d59 	.word	0x08000d59
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d85 	.word	0x08000d85
 8000cfc:	08000d9b 	.word	0x08000d9b
		case MRCC_BUS_AHB1:   SET_BIT(RCC_AHB1ENR, Copy_PeriphID);   break;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <MRCC_vEnablePeriphClock+0xfc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	79ba      	ldrb	r2, [r7, #6]
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a2c      	ldr	r2, [pc, #176]	; (8000dc0 <MRCC_vEnablePeriphClock+0xfc>)
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e04d      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2:   SET_BIT(RCC_AHB2ENR, Copy_PeriphID);   break;
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <MRCC_vEnablePeriphClock+0x100>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	4611      	mov	r1, r2
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <MRCC_vEnablePeriphClock+0x100>)
 8000d26:	430b      	orrs	r3, r1
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e042      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1:   SET_BIT(RCC_APB1ENR, Copy_PeriphID);   break;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MRCC_vEnablePeriphClock+0x104>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <MRCC_vEnablePeriphClock+0x104>)
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e037      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2:   SET_BIT(RCC_APB2ENR, Copy_PeriphID);   break;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MRCC_vEnablePeriphClock+0x108>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	79ba      	ldrb	r2, [r7, #6]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <MRCC_vEnablePeriphClock+0x108>)
 8000d52:	430b      	orrs	r3, r1
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e02c      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
		case MRCC_BUS_AHB1LP: SET_BIT(RCC_AHB1LPENR, Copy_PeriphID); break;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MRCC_vEnablePeriphClock+0x10c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	4611      	mov	r1, r2
 8000d66:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <MRCC_vEnablePeriphClock+0x10c>)
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	e021      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2LP: SET_BIT(RCC_AHB2LPENR, Copy_PeriphID); break;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MRCC_vEnablePeriphClock+0x110>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	79ba      	ldrb	r2, [r7, #6]
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <MRCC_vEnablePeriphClock+0x110>)
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e016      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1LP: SET_BIT(RCC_APB1LPENR, Copy_PeriphID); break;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MRCC_vEnablePeriphClock+0x114>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	79ba      	ldrb	r2, [r7, #6]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	4611      	mov	r1, r2
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <MRCC_vEnablePeriphClock+0x114>)
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e00b      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2LP: SET_BIT(RCC_APB2LPENR, Copy_PeriphID); break;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MRCC_vEnablePeriphClock+0x118>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	79ba      	ldrb	r2, [r7, #6]
 8000da0:	2101      	movs	r1, #1
 8000da2:	fa01 f202 	lsl.w	r2, r1, r2
 8000da6:	4611      	mov	r1, r2
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <MRCC_vEnablePeriphClock+0x118>)
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e000      	b.n	8000db2 <MRCC_vEnablePeriphClock+0xee>
        default: break;
 8000db0:	bf00      	nop
    }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023830 	.word	0x40023830
 8000dc4:	40023834 	.word	0x40023834
 8000dc8:	40023840 	.word	0x40023840
 8000dcc:	40023844 	.word	0x40023844
 8000dd0:	40023850 	.word	0x40023850
 8000dd4:	40023854 	.word	0x40023854
 8000dd8:	40023860 	.word	0x40023860
 8000ddc:	40023864 	.word	0x40023864

08000de0 <MSTK_vInit>:
/* Func. Name: MSTK_vInit               */
/* i/p arguments: nothing               */
/* o/p arguments: nothing               */
/* Desc. : This API Initializes SysTick */
/****************************************/
void MSTK_vInit(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
    /* Disable Systick */
    CLR_BIT(STK_CTRL, MSTK_CTRL_ENABLE_BIT);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MSTK_vInit+0x34>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <MSTK_vInit+0x34>)
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]
    /* Disable Systick INT */
    CLR_BIT(STK_CTRL, MSTK_CTRL_TICKINT_BIT);
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MSTK_vInit+0x34>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <MSTK_vInit+0x34>)
 8000df6:	f023 0302 	bic.w	r3, r3, #2
 8000dfa:	6013      	str	r3, [r2, #0]
    /* Select SysTick CLK Source */
    WRITE_BITS(STK_CTRL, MSTK_CLOCK_SOURCE, ONE_BIT, MSTK_CTRL_CLKSOURCE_BIT);
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <MSTK_vInit+0x34>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <MSTK_vInit+0x34>)
 8000e02:	f023 0304 	bic.w	r3, r3, #4
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <MSTK_vBusyWait>:
/* Func. Name: MSTK_vDelay                         */
/* i/p arguments: Copy_u32Ticks                    */
/* o/p arguments: nothing                          */
/* Desc. : This API Make Delay Using SysTick Timer */
/***************************************************/
void MSTK_vBusyWait(u32 Copy_u32Ticks) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    /* Reload the value in the load register */
    STK_LOAD = Copy_u32Ticks;
 8000e20:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <MSTK_vBusyWait+0x4c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
    /* Start Systick */
    SET_BIT(STK_CTRL, MSTK_CTRL_ENABLE_BIT);
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MSTK_vBusyWait+0x50>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <MSTK_vBusyWait+0x50>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6013      	str	r3, [r2, #0]
    /* Booling Till the Flag is Raised */
    while(!GET_BIT(STK_CTRL, MSTK_CTRL_COUNTFLAG_BIT));
 8000e32:	bf00      	nop
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MSTK_vBusyWait+0x50>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <MSTK_vBusyWait+0x1c>
    /* Stop the Timer */
    CLR_BIT(STK_CTRL, MSTK_CTRL_ENABLE_BIT);
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MSTK_vBusyWait+0x50>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <MSTK_vBusyWait+0x50>)
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]
    STK_LOAD = 0;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <MSTK_vBusyWait+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
    STK_VAL = 0;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MSTK_vBusyWait+0x54>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e014 	.word	0xe000e014
 8000e68:	e000e010 	.word	0xe000e010
 8000e6c:	e000e018 	.word	0xe000e018

08000e70 <SysTick_Handler>:
/* Func. Name: SysTick_Handler           */
/* i/p arguments: nothing                */
/* o/p arguments: nothing                */
/* Desc. : This API is SysTick Interrupt */
/*****************************************/
void SysTick_Handler() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    if (Global_u8CallMode == MSTK_SINGLE_CALL_MODE) {
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <SysTick_Handler+0x48>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <SysTick_Handler+0x30>
        /* Disable INT */
        CLR_BIT(STK_CTRL,MSTK_CTRL_TICKINT_BIT);
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <SysTick_Handler+0x4c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <SysTick_Handler+0x4c>)
 8000e82:	f023 0302 	bic.w	r3, r3, #2
 8000e86:	6013      	str	r3, [r2, #0]
        /* Stop the Timer */
        CLR_BIT(STK_CTRL,MSTK_CTRL_ENABLE_BIT);
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <SysTick_Handler+0x4c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <SysTick_Handler+0x4c>)
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]
        STK_LOAD = 0;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <SysTick_Handler+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
        STK_VAL = 0;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <SysTick_Handler+0x54>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    if (MSTK_CallBack != (void*)0) { MSTK_CallBack(); }
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <SysTick_Handler+0x58>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <SysTick_Handler+0x3e>
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <SysTick_Handler+0x58>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4798      	blx	r3
    /* Clear Flag */
    (void)GET_BIT(STK_CTRL,MSTK_CTRL_COUNTFLAG_BIT);
 8000eae:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <SysTick_Handler+0x4c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000074 	.word	0x20000074
 8000ebc:	e000e010 	.word	0xe000e010
 8000ec0:	e000e014 	.word	0xe000e014
 8000ec4:	e000e018 	.word	0xe000e018
 8000ec8:	20000070 	.word	0x20000070
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <MUSART_vInit>:
/* i/p arguemnts: A_ClockInitStruct: Contains the USART Clock Settings */
/* i/p arguemnts: USARTx: USART1, USART2, USART6    				   */
/* o/p arguments: nothing                              				   */
/* Desc. : This API initializes USARTx with Specifications 			   */
/***********************************************************************/
void MUSART_vInit(USART_t* USARTx, MUSART_InitTypeDef* A_InitStruct, MUSART_ClockInitTypeDef* A_ClockInitStruct) {
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	/* Set The Baudrate */
	switch (A_InitStruct->Oversampling)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	7a9b      	ldrb	r3, [r3, #10]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <MUSART_vInit+0x1a>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d072      	beq.n	8000fce <MUSART_vInit+0xfe>
 8000ee8:	e0e1      	b.n	80010ae <MUSART_vInit+0x1de>
	{
		case MUSART_OVER_SAMPLING_16: USARTx->BRR = MUSART_BRR_SAMPLING16(__MUSART_PCLK__, A_InitStruct->BaudRate); break;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fab4 	bl	800045c <__aeabi_ui2d>
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b8f      	ldr	r3, [pc, #572]	; (8001138 <MUSART_vInit+0x268>)
 8000efa:	f7ff fb29 	bl	8000550 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	a18b      	add	r1, pc, #556	; (adr r1, 8001130 <MUSART_vInit+0x260>)
 8000f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f08:	f7ff fc4c 	bl	80007a4 <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fd2e 	bl	8000974 <__aeabi_d2uiz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a88      	ldr	r2, [pc, #544]	; (800113c <MUSART_vInit+0x26c>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	011c      	lsls	r4, r3, #4
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa97 	bl	800045c <__aeabi_ui2d>
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b81      	ldr	r3, [pc, #516]	; (8001138 <MUSART_vInit+0x268>)
 8000f34:	f7ff fb0c 	bl	8000550 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	a17c      	add	r1, pc, #496	; (adr r1, 8001130 <MUSART_vInit+0x260>)
 8000f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f42:	f7ff fc2f 	bl	80007a4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd11 	bl	8000974 <__aeabi_d2uiz>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b79      	ldr	r3, [pc, #484]	; (800113c <MUSART_vInit+0x26c>)
 8000f56:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2164      	movs	r1, #100	; 0x64
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	3332      	adds	r3, #50	; 0x32
 8000f68:	4a74      	ldr	r2, [pc, #464]	; (800113c <MUSART_vInit+0x26c>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f74:	441c      	add	r4, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa6e 	bl	800045c <__aeabi_ui2d>
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <MUSART_vInit+0x268>)
 8000f86:	f7ff fae3 	bl	8000550 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	a168      	add	r1, pc, #416	; (adr r1, 8001130 <MUSART_vInit+0x260>)
 8000f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f94:	f7ff fc06 	bl	80007a4 <__aeabi_ddiv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fce8 	bl	8000974 <__aeabi_d2uiz>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b65      	ldr	r3, [pc, #404]	; (800113c <MUSART_vInit+0x26c>)
 8000fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	2164      	movs	r1, #100	; 0x64
 8000fb0:	fb01 f303 	mul.w	r3, r1, r3
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	3332      	adds	r3, #50	; 0x32
 8000fba:	4a60      	ldr	r2, [pc, #384]	; (800113c <MUSART_vInit+0x26c>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	095b      	lsrs	r3, r3, #5
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	18e2      	adds	r2, r4, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	e06f      	b.n	80010ae <MUSART_vInit+0x1de>
		case MUSART_OVER_SAMPLING_8:  USARTx->BRR = MUSART_BRR_SAMPLING8(__MUSART_PCLK__, A_InitStruct->BaudRate);  break;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa42 	bl	800045c <__aeabi_ui2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	f7ff f902 	bl	80001e4 <__adddf3>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	a152      	add	r1, pc, #328	; (adr r1, 8001130 <MUSART_vInit+0x260>)
 8000fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fea:	f7ff fbdb 	bl	80007a4 <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fcbd 	bl	8000974 <__aeabi_d2uiz>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <MUSART_vInit+0x26c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	011c      	lsls	r4, r3, #4
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa26 	bl	800045c <__aeabi_ui2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	f7ff f8e6 	bl	80001e4 <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	a144      	add	r1, pc, #272	; (adr r1, 8001130 <MUSART_vInit+0x260>)
 800101e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001022:	f7ff fbbf 	bl	80007a4 <__aeabi_ddiv>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fca1 	bl	8000974 <__aeabi_d2uiz>
 8001032:	4602      	mov	r2, r0
 8001034:	4b41      	ldr	r3, [pc, #260]	; (800113c <MUSART_vInit+0x26c>)
 8001036:	fba3 1302 	umull	r1, r3, r3, r2
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	fb01 f303 	mul.w	r3, r1, r3
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	3332      	adds	r3, #50	; 0x32
 8001048:	4a3c      	ldr	r2, [pc, #240]	; (800113c <MUSART_vInit+0x26c>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001056:	441c      	add	r4, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f9fd 	bl	800045c <__aeabi_ui2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	f7ff f8bd 	bl	80001e4 <__adddf3>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	a130      	add	r1, pc, #192	; (adr r1, 8001130 <MUSART_vInit+0x260>)
 8001070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001074:	f7ff fb96 	bl	80007a4 <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fc78 	bl	8000974 <__aeabi_d2uiz>
 8001084:	4602      	mov	r2, r0
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MUSART_vInit+0x26c>)
 8001088:	fba3 1302 	umull	r1, r3, r3, r2
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	2164      	movs	r1, #100	; 0x64
 8001090:	fb01 f303 	mul.w	r3, r1, r3
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	3332      	adds	r3, #50	; 0x32
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <MUSART_vInit+0x26c>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	095b      	lsrs	r3, r3, #5
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	18e2      	adds	r2, r4, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	bf00      	nop
	}
	/* Set The Control Register */
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	7a9b      	ldrb	r3, [r3, #10]
 80010b2:	03da      	lsls	r2, r3, #15
			      (A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	035b      	lsls	r3, r3, #13
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 80010ba:	431a      	orrs	r2, r3
				  (A_InitStruct->DataWidth << MUSART_CR1_M_BIT)            |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	031b      	lsls	r3, r3, #12
			      (A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT) |
 80010c2:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Enable << MUSART_CR1_PCE_BIT)      |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	799b      	ldrb	r3, [r3, #6]
 80010c8:	029b      	lsls	r3, r3, #10
				  (A_InitStruct->DataWidth << MUSART_CR1_M_BIT)            |
 80010ca:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Selection << MUSART_CR1_PS_BIT)    ;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	79db      	ldrb	r3, [r3, #7]
 80010d0:	025b      	lsls	r3, r3, #9
				  (A_InitStruct->Parity_Enable << MUSART_CR1_PCE_BIT)      |
 80010d2:	4313      	orrs	r3, r2
 80010d4:	461a      	mov	r2, r3
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	60da      	str	r2, [r3, #12]
	/* Set The Direction of Transferring Data */
	WRITE_BITS(USARTx->CR1, A_InitStruct->TransferDirection, TWO_BITS, MUSART_CR1_RE_BIT);
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	7a1b      	ldrb	r3, [r3, #8]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f023 030c 	bic.w	r3, r3, #12
 80010ea:	431a      	orrs	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	60da      	str	r2, [r3, #12]
	/* Set The Second Control Register */
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	795b      	ldrb	r3, [r3, #5]
 80010f4:	031a      	lsls	r2, r3, #12
					(A_ClockInitStruct->ClockOutput << MUSART_CR2_CLKEN_BIT)       |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	02db      	lsls	r3, r3, #11
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 80010fc:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPhase << MUSART_CR2_CPHA_BIT)         |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	789b      	ldrb	r3, [r3, #2]
 8001102:	025b      	lsls	r3, r3, #9
					(A_ClockInitStruct->ClockOutput << MUSART_CR2_CLKEN_BIT)       |
 8001104:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPolarity << MUSART_CR2_CPOL_BIT)      |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	029b      	lsls	r3, r3, #10
					(A_ClockInitStruct->ClockPhase << MUSART_CR2_CPHA_BIT)         |
 800110c:	431a      	orrs	r2, r3
					(A_ClockInitStruct->LastBitClockPulse << MUSART_CR2_LBCL_BIT)  ;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	78db      	ldrb	r3, [r3, #3]
 8001112:	021b      	lsls	r3, r3, #8
					(A_ClockInitStruct->ClockPolarity << MUSART_CR2_CPOL_BIT)      |
 8001114:	4313      	orrs	r3, r2
 8001116:	461a      	mov	r2, r3
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	611a      	str	r2, [r3, #16]
	/* Clear The Status Register */
	USARTx->SR = 0;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	f3af 8000 	nop.w
 8001130:	00000000 	.word	0x00000000
 8001134:	41a7d784 	.word	0x41a7d784
 8001138:	40100000 	.word	0x40100000
 800113c:	51eb851f 	.word	0x51eb851f

08001140 <MUSART_vEnable>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6 */
/* o/p arguments: nothing                        */
/* Desc. : This API Enables USARTx  			 */
/*************************************************/
void MUSART_vEnable(USART_t* USARTx)
{ SET_BIT(USARTx->CR1,MUSART_CR1_UE_BIT); }
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <MUSART_vTransmitByte>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6      */
/* i/p arguemnts: Copy_u8Byte: Byte to be Transmitted */
/* o/p arguments: nothing                             */
/* Desc. : This API Transmit Byte using USARTx 		  */
/******************************************************/
void MUSART_vTransmitByte(USART_t* USARTx, u8 Copy_u8Byte) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	while (GET_BIT(USARTx->SR, MUSART_SR_TXE_BIT) == 0);
 800116c:	bf00      	nop
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f9      	beq.n	800116e <MUSART_vTransmitByte+0xe>
	USARTx->DR= Copy_u8Byte;
 800117a:	78fa      	ldrb	r2, [r7, #3]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	605a      	str	r2, [r3, #4]
	while (GET_BIT(USARTx->SR, MUSART_SR_TC_BIT) == 0);
 8001180:	bf00      	nop
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f9      	beq.n	8001182 <MUSART_vTransmitByte+0x22>
	CLR_BIT(USARTx->SR, MUSART_SR_TC_BIT);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <MUSART_vTransmitString>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6          */
/* i/p arguemnts: Copy_u8String: String to be Transmitted */
/* o/p arguments: nothing                                 */
/* Desc. : This API Transmit String using USARTx 		  */
/**********************************************************/
void MUSART_vTransmitString(USART_t* USARTx, u8* Copy_u8String) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
	u8 Local_u8Counter = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8String[Local_u8Counter] != '\0') {
 80011b4:	e00a      	b.n	80011cc <MUSART_vTransmitString+0x26>
		MUSART_vTransmitByte(USARTx, Copy_u8String[Local_u8Counter]);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffcd 	bl	8001160 <MUSART_vTransmitByte>
		Local_u8Counter++;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	3301      	adds	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8String[Local_u8Counter] != '\0') {
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ee      	bne.n	80011b6 <MUSART_vTransmitString+0x10>
	}
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <MUSART_u8ReceiveByteSynchBlocking>:
/* Func. Name: MUSART_u8ReceiveByteSynchBlocking        */
/* i/p arguments: USARTx: USART1, USART2, USART6        */
/* o/p arguments: Recieved Data                         */
/* Desc. : This API Receives With Blocking using USARTx */
/********************************************************/
u8 MUSART_u8ReceiveByteSynchBlocking(USART_t* USARTx, u8* Copy_u8Data) {
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	u32 Local_u32TimeOut = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
	/* Iterate untill recieving is complete, or untill timeout */
	while ((!GET_BIT(USARTx->SR,MUSART_SR_RXNE_BIT)) && (Local_u32TimeOut < MUSART_THRESHOLD_VALUE)) { Local_u32TimeOut++; }
 80011f2:	e002      	b.n	80011fa <MUSART_u8ReceiveByteSynchBlocking+0x16>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <MUSART_u8ReceiveByteSynchBlocking+0x2a>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <MUSART_u8ReceiveByteSynchBlocking+0x50>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d9f2      	bls.n	80011f4 <MUSART_u8ReceiveByteSynchBlocking+0x10>
	/* return 255 if timeout, else return the recieved data */
	if (Local_u32TimeOut == MUSART_THRESHOLD_VALUE) { return 0; }
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <MUSART_u8ReceiveByteSynchBlocking+0x54>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <MUSART_u8ReceiveByteSynchBlocking+0x36>
 8001216:	2300      	movs	r3, #0
 8001218:	e005      	b.n	8001226 <MUSART_u8ReceiveByteSynchBlocking+0x42>
	else { *Copy_u8Data = USARTx->DR; return 1; }
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	0001869f 	.word	0x0001869f
 8001238:	000186a0 	.word	0x000186a0

0800123c <MUSART_vReceiveStringSynchBlocking>:
/* Func. Name: MUSART_vReceiveStringSynchBlocking       	   */
/* i/p arguments: USARTx: USART1, USART2, USART6      		   */
/* o/p arguments: Copy_u8String: Received String               */
/* Desc. : This API Receives String With Blocking using USARTx */
/***************************************************************/
void MUSART_vReceiveStringSynchBlocking(USART_t* USARTx, u8* Copy_u8String) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	u8 Local_u8Counter = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8DataRecieved = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	73bb      	strb	r3, [r7, #14]
	while(MUSART_u8ReceiveByteSynchBlocking(USARTx,&Local_u8DataRecieved))
 800124e:	e007      	b.n	8001260 <MUSART_vReceiveStringSynchBlocking+0x24>
	{
		Copy_u8String[Local_u8Counter] = Local_u8DataRecieved;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	7bba      	ldrb	r2, [r7, #14]
 8001258:	701a      	strb	r2, [r3, #0]
		Local_u8Counter++;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
	while(MUSART_u8ReceiveByteSynchBlocking(USARTx,&Local_u8DataRecieved))
 8001260:	f107 030e 	add.w	r3, r7, #14
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffbc 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ee      	bne.n	8001250 <MUSART_vReceiveStringSynchBlocking+0x14>
	}
	Copy_u8String[Local_u8Counter] = '\0';
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <MUSART_vRxIntStatus>:
/* i/p arguments: USARTx: USART1, USART2, USART6 	 */
/* i/p arguments: Copy_u8Status: ENABLE, DISABLE 	 */
/* o/p arguments: nothing                        	 */
/* Desc. : This API Set the interrupt flag of USARTx */
/*****************************************************/
void MUSART_vRxIntStatus(USART_t* USARTx, u8 Copy_u8Status) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	switch (Copy_u8Status)
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <MUSART_vRxIntStatus+0x24>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10d      	bne.n	80012b6 <MUSART_vRxIntStatus+0x32>
	{
		case MUSART_ENABLE:  SET_BIT(USARTx->CR1,MUSART_CR1_RXNEIE_BIT); break;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f043 0220 	orr.w	r2, r3, #32
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	e007      	b.n	80012b8 <MUSART_vRxIntStatus+0x34>
		case MUSART_DISABLE: CLR_BIT(USARTx->CR1,MUSART_CR1_RXNEIE_BIT); break;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f023 0220 	bic.w	r2, r3, #32
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	e000      	b.n	80012b8 <MUSART_vRxIntStatus+0x34>
		default: break;
 80012b6:	bf00      	nop
	}
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <USART1_IRQHandler>:
{ MUSART2_CallBack = ptr; }
void MUSART6_vSetCallBack(void (*ptr)(void))
{ MUSART6_CallBack = ptr; }


void USART1_IRQHandler(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	USART1->SR = 0;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <USART1_IRQHandler+0x14>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <USART1_IRQHandler+0x18>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4798      	blx	r3
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40011000 	.word	0x40011000
 80012dc:	20000078 	.word	0x20000078

080012e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	USART2->SR = 0;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <USART2_IRQHandler+0x14>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <USART2_IRQHandler+0x18>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4798      	blx	r3
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40004400 	.word	0x40004400
 80012f8:	2000007c 	.word	0x2000007c

080012fc <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	USART6->SR = 0;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <USART6_IRQHandler+0x14>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <USART6_IRQHandler+0x18>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4798      	blx	r3
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40011400 	.word	0x40011400
 8001314:	20000080 	.word	0x20000080

08001318 <Private_u8ASCII2Hex>:
#include "MFMI_Interface.h"

u32 Global_u32BaseAddress = 0;

static u8 Private_u8ASCII2Hex(u8 Copy_u8ASCII)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8ASCII >= '0' && Copy_u8ASCII <= '9') { return Copy_u8ASCII - '0'; }
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b2f      	cmp	r3, #47	; 0x2f
 8001326:	d906      	bls.n	8001336 <Private_u8ASCII2Hex+0x1e>
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b39      	cmp	r3, #57	; 0x39
 800132c:	d803      	bhi.n	8001336 <Private_u8ASCII2Hex+0x1e>
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	3b30      	subs	r3, #48	; 0x30
 8001332:	b2db      	uxtb	r3, r3
 8001334:	e00a      	b.n	800134c <Private_u8ASCII2Hex+0x34>
	else if (Copy_u8ASCII >= 'A' && Copy_u8ASCII <= 'F') { return Copy_u8ASCII - 55; }
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b40      	cmp	r3, #64	; 0x40
 800133a:	d906      	bls.n	800134a <Private_u8ASCII2Hex+0x32>
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b46      	cmp	r3, #70	; 0x46
 8001340:	d803      	bhi.n	800134a <Private_u8ASCII2Hex+0x32>
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	3b37      	subs	r3, #55	; 0x37
 8001346:	b2db      	uxtb	r3, r3
 8001348:	e000      	b.n	800134c <Private_u8ASCII2Hex+0x34>
	return 0;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SHPR_voidParseHexRecord>:

void SHPR_voidParseHexRecord(u8* Copy_u8DataRecord)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	/* If Start Record, Set the Base Address */
	if (Copy_u8DataRecord[8] == '4') {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3308      	adds	r3, #8
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b34      	cmp	r3, #52	; 0x34
 8001368:	d126      	bne.n	80013b8 <SHPR_voidParseHexRecord+0x60>
		Global_u32BaseAddress = (u32)( ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[9])  << 28))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3309      	adds	r3, #9
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffd1 	bl	8001318 <Private_u8ASCII2Hex>
 8001376:	4603      	mov	r3, r0
 8001378:	071b      	lsls	r3, r3, #28
 800137a:	461c      	mov	r4, r3
									 | ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[10]) << 24))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	330a      	adds	r3, #10
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ffc8 	bl	8001318 <Private_u8ASCII2Hex>
 8001388:	4603      	mov	r3, r0
 800138a:	061b      	lsls	r3, r3, #24
 800138c:	431c      	orrs	r4, r3
									 | ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[11]) << 20))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	330b      	adds	r3, #11
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffbf 	bl	8001318 <Private_u8ASCII2Hex>
 800139a:	4603      	mov	r3, r0
 800139c:	051b      	lsls	r3, r3, #20
 800139e:	431c      	orrs	r4, r3
									 | ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[12]) << 16)) );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	330c      	adds	r3, #12
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ffb6 	bl	8001318 <Private_u8ASCII2Hex>
 80013ac:	4603      	mov	r3, r0
 80013ae:	041b      	lsls	r3, r3, #16
		Global_u32BaseAddress = (u32)( ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[9])  << 28))
 80013b0:	4323      	orrs	r3, r4
 80013b2:	4a58      	ldr	r2, [pc, #352]	; (8001514 <SHPR_voidParseHexRecord+0x1bc>)
 80013b4:	6013      	str	r3, [r2, #0]
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+11])<<12))
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+12])<<8)));
		}
		MFMI_vProgram(Local_u32Addresss, (u16*)Local_u16Data, Local_u8Length/2);
	}
}
 80013b6:	e0a9      	b.n	800150c <SHPR_voidParseHexRecord+0x1b4>
	else if (Copy_u8DataRecord[8] == '0') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3308      	adds	r3, #8
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b30      	cmp	r3, #48	; 0x30
 80013c0:	f040 80a4 	bne.w	800150c <SHPR_voidParseHexRecord+0x1b4>
		u8 Local_u8Length = (Private_u8ASCII2Hex(Copy_u8DataRecord[1]) << 4) + Private_u8ASCII2Hex(Copy_u8DataRecord[2]);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffa4 	bl	8001318 <Private_u8ASCII2Hex>
 80013d0:	4603      	mov	r3, r0
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	b2dc      	uxtb	r4, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3302      	adds	r3, #2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff9b 	bl	8001318 <Private_u8ASCII2Hex>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4423      	add	r3, r4
 80013e6:	75bb      	strb	r3, [r7, #22]
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3303      	adds	r3, #3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff92 	bl	8001318 <Private_u8ASCII2Hex>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	031b      	lsls	r3, r3, #12
 80013fa:	b29c      	uxth	r4, r3
				 	 	 	 	 	 	  | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[4])<< 8))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3304      	adds	r3, #4
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff88 	bl	8001318 <Private_u8ASCII2Hex>
 8001408:	4603      	mov	r3, r0
 800140a:	b29b      	uxth	r3, r3
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 8001410:	4323      	orrs	r3, r4
 8001412:	b29c      	uxth	r4, r3
										  | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[5])<< 4))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3305      	adds	r3, #5
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff7c 	bl	8001318 <Private_u8ASCII2Hex>
 8001420:	4603      	mov	r3, r0
 8001422:	b29b      	uxth	r3, r3
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	b29b      	uxth	r3, r3
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 8001428:	4323      	orrs	r3, r4
 800142a:	b29c      	uxth	r4, r3
										  | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[6])<< 0)) );
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3306      	adds	r3, #6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff70 	bl	8001318 <Private_u8ASCII2Hex>
 8001438:	4603      	mov	r3, r0
 800143a:	b29b      	uxth	r3, r3
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 800143c:	4323      	orrs	r3, r4
 800143e:	82bb      	strh	r3, [r7, #20]
		u32 Local_u32Addresss = Global_u32BaseAddress + (u32)(Local_u16OffsetAddress);
 8001440:	8aba      	ldrh	r2, [r7, #20]
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <SHPR_voidParseHexRecord+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
		u8 Local_u8Counter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
		u16* Local_u16Data = (u16*)malloc(sizeof(u16) * (Local_u8Length / 2));
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fcf4 	bl	8001e44 <malloc>
 800145c:	4603      	mov	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]
		for (Local_u8Counter = 0; Local_u8Counter < Local_u8Length/2; Local_u8Counter++)
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
 8001464:	e043      	b.n	80014ee <SHPR_voidParseHexRecord+0x196>
			Local_u16Data[Local_u8Counter] = (u16)(((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+9])<<4))
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	3309      	adds	r3, #9
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff50 	bl	8001318 <Private_u8ASCII2Hex>
 8001478:	4603      	mov	r3, r0
 800147a:	b29b      	uxth	r3, r3
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	b29c      	uxth	r4, r3
					 	 	 	 	 	 	     | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+10])<<0))
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	330a      	adds	r3, #10
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff43 	bl	8001318 <Private_u8ASCII2Hex>
 8001492:	4603      	mov	r3, r0
 8001494:	b29b      	uxth	r3, r3
 8001496:	4323      	orrs	r3, r4
 8001498:	b29b      	uxth	r3, r3
 800149a:	b21c      	sxth	r4, r3
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+11])<<12))
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	330b      	adds	r3, #11
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff35 	bl	8001318 <Private_u8ASCII2Hex>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	031b      	lsls	r3, r3, #12
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4323      	orrs	r3, r4
 80014ba:	b21c      	sxth	r4, r3
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+12])<<8)));
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	330c      	adds	r3, #12
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff25 	bl	8001318 <Private_u8ASCII2Hex>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4323      	orrs	r3, r4
 80014da:	b219      	sxth	r1, r3
			Local_u16Data[Local_u8Counter] = (u16)(((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+9])<<4))
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	b28a      	uxth	r2, r1
 80014e6:	801a      	strh	r2, [r3, #0]
		for (Local_u8Counter = 0; Local_u8Counter < Local_u8Length/2; Local_u8Counter++)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	3301      	adds	r3, #1
 80014ec:	75fb      	strb	r3, [r7, #23]
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	7dfa      	ldrb	r2, [r7, #23]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3b5      	bcc.n	8001466 <SHPR_voidParseHexRecord+0x10e>
		MFMI_vProgram(Local_u32Addresss, (u16*)Local_u16Data, Local_u8Length/2);
 80014fa:	7dbb      	ldrb	r3, [r7, #22]
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	6938      	ldr	r0, [r7, #16]
 8001508:	f7ff fa66 	bl	80009d8 <MFMI_vProgram>
}
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	20000084 	.word	0x20000084

08001518 <SHPR_u8GetRecordLength>:


u8 SHPR_u8GetRecordLength(u8* Copy_u8DataRecord)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	/* Get the Length of the Record [1][2] */
	return (Private_u8ASCII2Hex(Copy_u8DataRecord[1]) << 4) + Private_u8ASCII2Hex(Copy_u8DataRecord[2]);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fef6 	bl	8001318 <Private_u8ASCII2Hex>
 800152c:	4603      	mov	r3, r0
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	b2dc      	uxtb	r4, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3302      	adds	r3, #2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff feed 	bl	8001318 <Private_u8ASCII2Hex>
 800153e:	4603      	mov	r3, r0
 8001540:	4423      	add	r3, r4
 8001542:	b2db      	uxtb	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}

0800154c <main>:
void BOOT_vReceiveDataRecord(void);
void BOOT_vFlashRecord(void);
void BOOT_vUpdateFirmwareStatus(void);
/**********************************************************************************************/

int main(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	BOOT_vInit();
 8001550:	f000 f964 	bl	800181c <BOOT_vInit>
	if (BOOT_u8Buffer == 'O') { BOOT_vJumpToApplicationCode(); }
 8001554:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <main+0x134>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b4f      	cmp	r3, #79	; 0x4f
 800155a:	d102      	bne.n	8001562 <main+0x16>
 800155c:	f000 f9bc 	bl	80018d8 <BOOT_vJumpToApplicationCode>
 8001560:	e08a      	b.n	8001678 <main+0x12c>
	else if (BOOT_u8Buffer == 'N') {
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <main+0x134>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b4e      	cmp	r3, #78	; 0x4e
 8001568:	f040 8086 	bne.w	8001678 <main+0x12c>
		while (true) {
    		BOOT_vReceiveDataRecord();
 800156c:	f000 f9d2 	bl	8001914 <BOOT_vReceiveDataRecord>
    		/* Parse and Flash */
    		BOOT_vFlashRecord();
 8001570:	f000 fad2 	bl	8001b18 <BOOT_vFlashRecord>
    		/* Restart the Buffer */
    		BOOT_u8DataRecord[20] = 0; BOOT_u8DataRecord[21] = 0;
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <main+0x138>)
 8001576:	2200      	movs	r2, #0
 8001578:	751a      	strb	r2, [r3, #20]
 800157a:	4b42      	ldr	r3, [pc, #264]	; (8001684 <main+0x138>)
 800157c:	2200      	movs	r2, #0
 800157e:	755a      	strb	r2, [r3, #21]
    		/* AT+CIPCLOSE
    		 * Ensure that Connection is Closed
    		 * Always Closes After Receiving But For Extra Ensuring
    		 */
    		do {
    			BOOT_u8ContFlag = 0;
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <main+0x13c>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
    		    BOOT_u8TimeOut = 0;
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <main+0x140>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
    		    MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPCLOSE\r\n");
 800158c:	4940      	ldr	r1, [pc, #256]	; (8001690 <main+0x144>)
 800158e:	4841      	ldr	r0, [pc, #260]	; (8001694 <main+0x148>)
 8001590:	f7ff fe09 	bl	80011a6 <MUSART_vTransmitString>
    		    /* Read Buffer */
    		    while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001594:	e030      	b.n	80015f8 <main+0xac>
    		    	MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001596:	493a      	ldr	r1, [pc, #232]	; (8001680 <main+0x134>)
 8001598:	483e      	ldr	r0, [pc, #248]	; (8001694 <main+0x148>)
 800159a:	f7ff fe23 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
    		    	if (BOOT_u8Buffer == 'O') { 											/* if 'O', Read Next Element */
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <main+0x134>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b4f      	cmp	r3, #79	; 0x4f
 80015a4:	d10b      	bne.n	80015be <main+0x72>
    		    		MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 80015a6:	4936      	ldr	r1, [pc, #216]	; (8001680 <main+0x134>)
 80015a8:	483a      	ldr	r0, [pc, #232]	; (8001694 <main+0x148>)
 80015aa:	f7ff fe1b 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
    		    		if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }			/* 'K' Means '\r\nOK' --> break */
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <main+0x134>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b4b      	cmp	r3, #75	; 0x4b
 80015b4:	d11a      	bne.n	80015ec <main+0xa0>
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <main+0x13c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e020      	b.n	8001600 <main+0xb4>
    		    	} else if (BOOT_u8Buffer == 'E') { 										/* if 'E', Read Next Element */
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <main+0x134>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b45      	cmp	r3, #69	; 0x45
 80015c4:	d10b      	bne.n	80015de <main+0x92>
    		    		MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 80015c6:	492e      	ldr	r1, [pc, #184]	; (8001680 <main+0x134>)
 80015c8:	4832      	ldr	r0, [pc, #200]	; (8001694 <main+0x148>)
 80015ca:	f7ff fe0b 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
    		    		if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 1; break; }			/* 'R' Means '\r\nERROR' --> break */
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <main+0x134>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b52      	cmp	r3, #82	; 0x52
 80015d4:	d10a      	bne.n	80015ec <main+0xa0>
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <main+0x13c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e010      	b.n	8001600 <main+0xb4>
    		    	} else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <main+0x134>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b62      	cmp	r3, #98	; 0x62
 80015e4:	d102      	bne.n	80015ec <main+0xa0>
 80015e6:	f000 f87d 	bl	80016e4 <BOOT_vInitESP>
 80015ea:	e009      	b.n	8001600 <main+0xb4>
    		    	BOOT_u8TimeOut++;
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <main+0x140>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <main+0x140>)
 80015f6:	701a      	strb	r2, [r3, #0]
    		    while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <main+0x140>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b0e      	cmp	r3, #14
 80015fe:	d9ca      	bls.n	8001596 <main+0x4a>
    		    }
    		} while (BOOT_u8ContFlag == 0);
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <main+0x13c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0bb      	beq.n	8001580 <main+0x34>
    		/* Increment the Counter */
    		BOOT_u8CounterD0 += 2;
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <main+0x14c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3302      	adds	r3, #2
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <main+0x14c>)
 8001612:	701a      	strb	r2, [r3, #0]
    		if (BOOT_u8CounterD0 >= 58) {
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <main+0x14c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b39      	cmp	r3, #57	; 0x39
 800161a:	d91b      	bls.n	8001654 <main+0x108>
    			BOOT_u8CounterD0 -= 10; BOOT_u8CounterD1++;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <main+0x14c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3b0a      	subs	r3, #10
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <main+0x14c>)
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <main+0x150>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <main+0x150>)
 8001632:	701a      	strb	r2, [r3, #0]
    			if (BOOT_u8CounterD1 >= 58) { BOOT_u8CounterD1 -= 10; BOOT_u8CounterD2++; }
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <main+0x150>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b39      	cmp	r3, #57	; 0x39
 800163a:	d90b      	bls.n	8001654 <main+0x108>
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <main+0x150>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3b0a      	subs	r3, #10
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <main+0x150>)
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <main+0x154>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <main+0x154>)
 8001652:	701a      	strb	r2, [r3, #0]
    		}
    		/* Check if it was the Last Record Received */
    		if (BOOT_u8DataRecord[30] == '1' || BOOT_u8DataRecord[43+(BOOT_u8RecordLength*2)] == '1') {
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <main+0x138>)
 8001656:	7f9b      	ldrb	r3, [r3, #30]
 8001658:	2b31      	cmp	r3, #49	; 0x31
 800165a:	d008      	beq.n	800166e <main+0x122>
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <main+0x158>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	332b      	adds	r3, #43	; 0x2b
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <main+0x138>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	2b31      	cmp	r3, #49	; 0x31
 800166a:	f47f af7f 	bne.w	800156c <main+0x20>
				/* Set the Status of the Firmware to Old
				 * So When Fetching Again, it Does Not Update it
				 */
    			BOOT_vUpdateFirmwareStatus();
 800166e:	f000 fa71 	bl	8001b54 <BOOT_vUpdateFirmwareStatus>
    			BOOT_vReceiveDataRecord();
 8001672:	f000 f94f 	bl	8001914 <BOOT_vReceiveDataRecord>
    		BOOT_vReceiveDataRecord();
 8001676:	e779      	b.n	800156c <main+0x20>
 8001678:	2300      	movs	r3, #0
    		}
    	}
	}
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000fb 	.word	0x200000fb
 8001684:	20000088 	.word	0x20000088
 8001688:	200000fc 	.word	0x200000fc
 800168c:	200000fe 	.word	0x200000fe
 8001690:	0800203c 	.word	0x0800203c
 8001694:	40011000 	.word	0x40011000
 8001698:	20000000 	.word	0x20000000
 800169c:	20000001 	.word	0x20000001
 80016a0:	20000002 	.word	0x20000002
 80016a4:	200000fd 	.word	0x200000fd

080016a8 <BOOT_vHWReset>:

void BOOT_vHWReset(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_HIGH);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2100      	movs	r1, #0
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <BOOT_vHWReset+0x38>)
 80016b2:	f7ff faa4 	bl	8000bfe <MGPIO_vSetPinValue>
	MSTK_vBusyWait(1000);
 80016b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ba:	f7ff fbad 	bl	8000e18 <MSTK_vBusyWait>
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_LOW);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <BOOT_vHWReset+0x38>)
 80016c4:	f7ff fa9b 	bl	8000bfe <MGPIO_vSetPinValue>
	MSTK_vBusyWait(1000);
 80016c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016cc:	f7ff fba4 	bl	8000e18 <MSTK_vBusyWait>
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_HIGH);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2100      	movs	r1, #0
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <BOOT_vHWReset+0x38>)
 80016d6:	f7ff fa92 	bl	8000bfe <MGPIO_vSetPinValue>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020000 	.word	0x40020000

080016e4 <BOOT_vInitESP>:

void BOOT_vInitESP(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	BOOT_vHWReset();
 80016e8:	f7ff ffde 	bl	80016a8 <BOOT_vHWReset>
	do {
		BOOT_u8ContFlag = 0;
 80016ec:	4b45      	ldr	r3, [pc, #276]	; (8001804 <BOOT_vInitESP+0x120>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		BOOT_u8TimeOut = 0;
 80016f2:	4b45      	ldr	r3, [pc, #276]	; (8001808 <BOOT_vInitESP+0x124>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
		MUSART_vTransmitString(BOOT_USART,(u8*)"ATE0\r\n");
 80016f8:	4944      	ldr	r1, [pc, #272]	; (800180c <BOOT_vInitESP+0x128>)
 80016fa:	4845      	ldr	r0, [pc, #276]	; (8001810 <BOOT_vInitESP+0x12c>)
 80016fc:	f7ff fd53 	bl	80011a6 <MUSART_vTransmitString>
		/* Read the Buffer */
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001700:	e030      	b.n	8001764 <BOOT_vInitESP+0x80>
			MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001702:	4944      	ldr	r1, [pc, #272]	; (8001814 <BOOT_vInitESP+0x130>)
 8001704:	4842      	ldr	r0, [pc, #264]	; (8001810 <BOOT_vInitESP+0x12c>)
 8001706:	f7ff fd6d 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
			if (BOOT_u8Buffer == 'O') { 										/* if 'O', Read Next Element */
 800170a:	4b42      	ldr	r3, [pc, #264]	; (8001814 <BOOT_vInitESP+0x130>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b4f      	cmp	r3, #79	; 0x4f
 8001710:	d10b      	bne.n	800172a <BOOT_vInitESP+0x46>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001712:	4940      	ldr	r1, [pc, #256]	; (8001814 <BOOT_vInitESP+0x130>)
 8001714:	483e      	ldr	r0, [pc, #248]	; (8001810 <BOOT_vInitESP+0x12c>)
 8001716:	f7ff fd65 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <BOOT_vInitESP+0x130>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b4b      	cmp	r3, #75	; 0x4b
 8001720:	d11a      	bne.n	8001758 <BOOT_vInitESP+0x74>
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <BOOT_vInitESP+0x120>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e020      	b.n	800176c <BOOT_vInitESP+0x88>
			} else if (BOOT_u8Buffer == 'R') {									/* if 'R', Read the Next Element */
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <BOOT_vInitESP+0x130>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b52      	cmp	r3, #82	; 0x52
 8001730:	d10b      	bne.n	800174a <BOOT_vInitESP+0x66>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001732:	4938      	ldr	r1, [pc, #224]	; (8001814 <BOOT_vInitESP+0x130>)
 8001734:	4836      	ldr	r0, [pc, #216]	; (8001810 <BOOT_vInitESP+0x12c>)
 8001736:	f7ff fd55 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 0; break; }		/* 'K' Means '\r\nERROR' --> break */
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <BOOT_vInitESP+0x130>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b52      	cmp	r3, #82	; 0x52
 8001740:	d10a      	bne.n	8001758 <BOOT_vInitESP+0x74>
 8001742:	4b30      	ldr	r3, [pc, #192]	; (8001804 <BOOT_vInitESP+0x120>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e010      	b.n	800176c <BOOT_vInitESP+0x88>
			} else if (BOOT_u8Buffer == 'b') { BOOT_vHWReset(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <BOOT_vInitESP+0x130>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b62      	cmp	r3, #98	; 0x62
 8001750:	d102      	bne.n	8001758 <BOOT_vInitESP+0x74>
 8001752:	f7ff ffa9 	bl	80016a8 <BOOT_vHWReset>
 8001756:	e009      	b.n	800176c <BOOT_vInitESP+0x88>
			BOOT_u8TimeOut++;
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <BOOT_vInitESP+0x124>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <BOOT_vInitESP+0x124>)
 8001762:	701a      	strb	r2, [r3, #0]
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <BOOT_vInitESP+0x124>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b0e      	cmp	r3, #14
 800176a:	d9ca      	bls.n	8001702 <BOOT_vInitESP+0x1e>
		}
	} while(BOOT_u8ContFlag == 0);
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <BOOT_vInitESP+0x120>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0bb      	beq.n	80016ec <BOOT_vInitESP+0x8>
	/* Set Station Mode */
	do {
		BOOT_u8ContFlag = 0;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <BOOT_vInitESP+0x120>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
		BOOT_u8TimeOut = 0;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <BOOT_vInitESP+0x124>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
		MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CWMODE=1\r\n");
 8001780:	4925      	ldr	r1, [pc, #148]	; (8001818 <BOOT_vInitESP+0x134>)
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <BOOT_vInitESP+0x12c>)
 8001784:	f7ff fd0f 	bl	80011a6 <MUSART_vTransmitString>
		/* Read the Buffer */
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001788:	e030      	b.n	80017ec <BOOT_vInitESP+0x108>
			MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 800178a:	4922      	ldr	r1, [pc, #136]	; (8001814 <BOOT_vInitESP+0x130>)
 800178c:	4820      	ldr	r0, [pc, #128]	; (8001810 <BOOT_vInitESP+0x12c>)
 800178e:	f7ff fd29 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
			if (BOOT_u8Buffer == 'O') { 										/* if 'O', Read Next Element */
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <BOOT_vInitESP+0x130>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b4f      	cmp	r3, #79	; 0x4f
 8001798:	d10b      	bne.n	80017b2 <BOOT_vInitESP+0xce>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 800179a:	491e      	ldr	r1, [pc, #120]	; (8001814 <BOOT_vInitESP+0x130>)
 800179c:	481c      	ldr	r0, [pc, #112]	; (8001810 <BOOT_vInitESP+0x12c>)
 800179e:	f7ff fd21 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <BOOT_vInitESP+0x130>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b4b      	cmp	r3, #75	; 0x4b
 80017a8:	d11a      	bne.n	80017e0 <BOOT_vInitESP+0xfc>
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <BOOT_vInitESP+0x120>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e020      	b.n	80017f4 <BOOT_vInitESP+0x110>
			} else if (BOOT_u8Buffer == 'R') {									/* if 'R', Read the Next Element */
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <BOOT_vInitESP+0x130>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b52      	cmp	r3, #82	; 0x52
 80017b8:	d10b      	bne.n	80017d2 <BOOT_vInitESP+0xee>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 80017ba:	4916      	ldr	r1, [pc, #88]	; (8001814 <BOOT_vInitESP+0x130>)
 80017bc:	4814      	ldr	r0, [pc, #80]	; (8001810 <BOOT_vInitESP+0x12c>)
 80017be:	f7ff fd11 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 0; break; }		/* 'K' Means '\r\nERROR' --> break */
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <BOOT_vInitESP+0x130>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b52      	cmp	r3, #82	; 0x52
 80017c8:	d10a      	bne.n	80017e0 <BOOT_vInitESP+0xfc>
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <BOOT_vInitESP+0x120>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e010      	b.n	80017f4 <BOOT_vInitESP+0x110>
			} else if (BOOT_u8Buffer == 'b') { BOOT_vHWReset(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <BOOT_vInitESP+0x130>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b62      	cmp	r3, #98	; 0x62
 80017d8:	d102      	bne.n	80017e0 <BOOT_vInitESP+0xfc>
 80017da:	f7ff ff65 	bl	80016a8 <BOOT_vHWReset>
 80017de:	e009      	b.n	80017f4 <BOOT_vInitESP+0x110>
			BOOT_u8TimeOut++;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <BOOT_vInitESP+0x124>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <BOOT_vInitESP+0x124>)
 80017ea:	701a      	strb	r2, [r3, #0]
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <BOOT_vInitESP+0x124>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0e      	cmp	r3, #14
 80017f2:	d9ca      	bls.n	800178a <BOOT_vInitESP+0xa6>
		}
	} while(BOOT_u8ContFlag == 0);
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <BOOT_vInitESP+0x120>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0bb      	beq.n	8001774 <BOOT_vInitESP+0x90>
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000fc 	.word	0x200000fc
 8001808:	200000fe 	.word	0x200000fe
 800180c:	0800204c 	.word	0x0800204c
 8001810:	40011000 	.word	0x40011000
 8001814:	200000fb 	.word	0x200000fb
 8001818:	08002054 	.word	0x08002054

0800181c <BOOT_vInit>:

void BOOT_vInit(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
	/* Initialize System Clock */
	MRCC_vInitSysAndBusClock();
 8001822:	f7ff fa15 	bl	8000c50 <MRCC_vInitSysAndBusClock>
	/* Enable Wanted Peripherals Clock */
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1,   MRCC_AHB1_GPIOAEN);
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fa4b 	bl	8000cc4 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1LP, MRCC_AHB1LP_FLITFLPEN);
 800182e:	210f      	movs	r1, #15
 8001830:	2004      	movs	r0, #4
 8001832:	f7ff fa47 	bl	8000cc4 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_APB2,   MRCC_APB2_USART1EN);
 8001836:	2104      	movs	r1, #4
 8001838:	2003      	movs	r0, #3
 800183a:	f7ff fa43 	bl	8000cc4 <MRCC_vEnablePeriphClock>
	/* Initialize Used Pins */
	MGPIO_vSetPinMode(ESP8266_RESET_PIN, MGPIO_MODE_OUTPUT);
 800183e:	2201      	movs	r2, #1
 8001840:	2100      	movs	r1, #0
 8001842:	4822      	ldr	r0, [pc, #136]	; (80018cc <BOOT_vInit+0xb0>)
 8001844:	f7ff f934 	bl	8000ab0 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(ESP8266_RESET_PIN, MGPIO_LOW_SPEED);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	481f      	ldr	r0, [pc, #124]	; (80018cc <BOOT_vInit+0xb0>)
 800184e:	f7ff f977 	bl	8000b40 <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(ESP8266_RESET_PIN, MGPIO_OUTPUT_TYPE_PP);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	481d      	ldr	r0, [pc, #116]	; (80018cc <BOOT_vInit+0xb0>)
 8001858:	f7ff f94f 	bl	8000afa <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_HIGH);
 800185c:	2201      	movs	r2, #1
 800185e:	2100      	movs	r1, #0
 8001860:	481a      	ldr	r0, [pc, #104]	; (80018cc <BOOT_vInit+0xb0>)
 8001862:	f7ff f9cc 	bl	8000bfe <MGPIO_vSetPinValue>
	MGPIO_vSetPinMode(GPIOA, MGPIO_PIN09, MGPIO_MODE_ALTERNATE);
 8001866:	2202      	movs	r2, #2
 8001868:	2109      	movs	r1, #9
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <BOOT_vInit+0xb0>)
 800186c:	f7ff f920 	bl	8000ab0 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIOA, MGPIO_PIN10, MGPIO_MODE_ALTERNATE);
 8001870:	2202      	movs	r2, #2
 8001872:	210a      	movs	r1, #10
 8001874:	4815      	ldr	r0, [pc, #84]	; (80018cc <BOOT_vInit+0xb0>)
 8001876:	f7ff f91b 	bl	8000ab0 <MGPIO_vSetPinMode>
	MGPIO_vSetPinAFDirection(GPIOA, MGPIO_PIN09, MGPIO_AF07);
 800187a:	2207      	movs	r2, #7
 800187c:	2109      	movs	r1, #9
 800187e:	4813      	ldr	r0, [pc, #76]	; (80018cc <BOOT_vInit+0xb0>)
 8001880:	f7ff f983 	bl	8000b8a <MGPIO_vSetPinAFDirection>
	MGPIO_vSetPinAFDirection(GPIOA, MGPIO_PIN10, MGPIO_AF07);
 8001884:	2207      	movs	r2, #7
 8001886:	210a      	movs	r1, #10
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <BOOT_vInit+0xb0>)
 800188a:	f7ff f97e 	bl	8000b8a <MGPIO_vSetPinAFDirection>
	/* Initialize USART */
	MUSART_InitTypeDef uart = {115200, MUSART_DATAWIDTH_8BIT,
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <BOOT_vInit+0xb4>)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	ca07      	ldmia	r2, {r0, r1, r2}
 8001894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							MUSART_STOP_ONE_BIT, MUSART_DISABLE,
							MUSART_PARITY_EVEN, MUSART_DIRECTION_TX_RX,
							MUSART_DISABLE, MUSART_OVER_SAMPLING_16};
	MUSART_ClockInitTypeDef uart_clock = {MUSART_DISABLE,0,0,0};
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
	MUSART_vInit(BOOT_USART, &uart, &uart_clock);
 800189c:	463a      	mov	r2, r7
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <BOOT_vInit+0xb8>)
 80018a4:	f7ff fb14 	bl	8000ed0 <MUSART_vInit>
	MUSART_vEnable(BOOT_USART);
 80018a8:	480a      	ldr	r0, [pc, #40]	; (80018d4 <BOOT_vInit+0xb8>)
 80018aa:	f7ff fc49 	bl	8001140 <MUSART_vEnable>
	MUSART_vRxIntStatus(BOOT_USART, MUSART_DISABLE);
 80018ae:	2100      	movs	r1, #0
 80018b0:	4808      	ldr	r0, [pc, #32]	; (80018d4 <BOOT_vInit+0xb8>)
 80018b2:	f7ff fce7 	bl	8001284 <MUSART_vRxIntStatus>
	/* Initialize Systick for the Busy Flag */
	MSTK_vInit();
 80018b6:	f7ff fa93 	bl	8000de0 <MSTK_vInit>
	/* Initialize Flash Driver */
	MFMI_vInit();
 80018ba:	f7ff f87b 	bl	80009b4 <MFMI_vInit>
	/* Initialize ESP8266 Settings */
	BOOT_vInitESP();
 80018be:	f7ff ff11 	bl	80016e4 <BOOT_vInitESP>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020000 	.word	0x40020000
 80018d0:	08002064 	.word	0x08002064
 80018d4:	40011000 	.word	0x40011000

080018d8 <BOOT_vJumpToApplicationCode>:
void BOOT_vEraseSectors(void) {
	u8 BOOT_u8Counter = 1;
	for (; BOOT_u8Counter < _SECTORS_TO_BE_ERASED_+1; BOOT_u8Counter++) { MFMI_vSectorErase(BOOT_u8Counter); }
}

void BOOT_vJumpToApplicationCode(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
	/* Set the MSP */
	u32 MSP_VALUE = *((volatile u32*)0x08004000);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <BOOT_vJumpToApplicationCode+0x30>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]
	__asm volatile("MSR MSP,%0"::"r"(MSP_VALUE));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f383 8808 	msr	MSP, r3
	/* Set the Vector Table */
	*((volatile u32*) 0xE000ED08) = 0x08004000;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <BOOT_vJumpToApplicationCode+0x34>)
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <BOOT_vJumpToApplicationCode+0x30>)
 80018ee:	601a      	str	r2, [r3, #0]
	/* Jump to the Reset Handler of the APPLICATION CODE */
	void (*BOOT_voidJump)(void);									/* Create a Pointer to Function */
	u32 BOOT_ResetHandlerAddress = *((volatile u32*)0x08004004); 	/* Variable of the Address of the Reset Handler */
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <BOOT_vJumpToApplicationCode+0x38>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]
	BOOT_voidJump = (void*)BOOT_ResetHandlerAddress;				/* Point it to the Address of the Reset Handler */
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	607b      	str	r3, [r7, #4]
	BOOT_voidJump();												/* Jump to the Reset Handler */
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4798      	blx	r3
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	08004000 	.word	0x08004000
 800190c:	e000ed08 	.word	0xe000ed08
 8001910:	08004004 	.word	0x08004004

08001914 <BOOT_vReceiveDataRecord>:

void BOOT_vReceiveDataRecord(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	do {
		/* Connect using TCP Protocol */
		do {
			BOOT_u8ContFlag = 0;
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 800191e:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPSTART=\"TCP\",\"69.197.143.14\",80\r\n");
 8001924:	4970      	ldr	r1, [pc, #448]	; (8001ae8 <BOOT_vReceiveDataRecord+0x1d4>)
 8001926:	4871      	ldr	r0, [pc, #452]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001928:	f7ff fc3d 	bl	80011a6 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 800192c:	e038      	b.n	80019a0 <BOOT_vReceiveDataRecord+0x8c>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 800192e:	4970      	ldr	r1, [pc, #448]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001930:	486e      	ldr	r0, [pc, #440]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001932:	f7ff fc57 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b62      	cmp	r3, #98	; 0x62
 800193c:	d102      	bne.n	8001944 <BOOT_vReceiveDataRecord+0x30>
 800193e:	f7ff fed1 	bl	80016e4 <BOOT_vInitESP>
 8001942:	e031      	b.n	80019a8 <BOOT_vReceiveDataRecord+0x94>
				else if (BOOT_u8Buffer == 'O') { 									/* if 'O', Read Next Element */
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b4f      	cmp	r3, #79	; 0x4f
 800194a:	d113      	bne.n	8001974 <BOOT_vReceiveDataRecord+0x60>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 800194c:	4968      	ldr	r1, [pc, #416]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 800194e:	4867      	ldr	r0, [pc, #412]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001950:	f7ff fc48 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means 'CONNECT\r\nOK' --> break */
 8001954:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b4b      	cmp	r3, #75	; 0x4b
 800195a:	d103      	bne.n	8001964 <BOOT_vReceiveDataRecord+0x50>
 800195c:	4b60      	ldr	r3, [pc, #384]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e021      	b.n	80019a8 <BOOT_vReceiveDataRecord+0x94>
					else if (BOOT_u8Buffer == 'R') {BOOT_u8ContFlag = 0; break; }	/* 'R' Means 'ERROR' --> Connect Again */
 8001964:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b52      	cmp	r3, #82	; 0x52
 800196a:	d113      	bne.n	8001994 <BOOT_vReceiveDataRecord+0x80>
 800196c:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e019      	b.n	80019a8 <BOOT_vReceiveDataRecord+0x94>
				} else if (BOOT_u8Buffer == 'Y') { 									/* if 'Y', Read Next Element */
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b59      	cmp	r3, #89	; 0x59
 800197a:	d10b      	bne.n	8001994 <BOOT_vReceiveDataRecord+0x80>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 800197c:	495c      	ldr	r1, [pc, #368]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 800197e:	485b      	ldr	r0, [pc, #364]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001980:	f7ff fc30 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == ' ') { BOOT_u8ContFlag = 1; break; }		/* ' ' Means 'ALREADY CONNECTED' --> break */
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b20      	cmp	r3, #32
 800198a:	d103      	bne.n	8001994 <BOOT_vReceiveDataRecord+0x80>
 800198c:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	e009      	b.n	80019a8 <BOOT_vReceiveDataRecord+0x94>
				}
				BOOT_u8TimeOut++;
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 800199e:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b0e      	cmp	r3, #14
 80019a6:	d9c2      	bls.n	800192e <BOOT_vReceiveDataRecord+0x1a>
			}
		} while(BOOT_u8ContFlag == 0);
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0b3      	beq.n	8001918 <BOOT_vReceiveDataRecord+0x4>
		/* TCP is now Connected, Send Data Length
		 * AT+CIPSEND=<DataLength>
		 * BOOT_u8ContFlag = 2 --> Skip Data Get URL Command
		 */
		do {
			BOOT_u8ContFlag = 0;
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
			if (BOOT_u8CounterD2 != '0')      { MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPSEND=53\r\n"); }
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <BOOT_vReceiveDataRecord+0x1e0>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b30      	cmp	r3, #48	; 0x30
 80019c2:	d004      	beq.n	80019ce <BOOT_vReceiveDataRecord+0xba>
 80019c4:	494c      	ldr	r1, [pc, #304]	; (8001af8 <BOOT_vReceiveDataRecord+0x1e4>)
 80019c6:	4849      	ldr	r0, [pc, #292]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 80019c8:	f7ff fbed 	bl	80011a6 <MUSART_vTransmitString>
 80019cc:	e036      	b.n	8001a3c <BOOT_vReceiveDataRecord+0x128>
			else if (BOOT_u8CounterD1 != '0') { MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPSEND=52\r\n"); }
 80019ce:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <BOOT_vReceiveDataRecord+0x1e8>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b30      	cmp	r3, #48	; 0x30
 80019d4:	d004      	beq.n	80019e0 <BOOT_vReceiveDataRecord+0xcc>
 80019d6:	494a      	ldr	r1, [pc, #296]	; (8001b00 <BOOT_vReceiveDataRecord+0x1ec>)
 80019d8:	4844      	ldr	r0, [pc, #272]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 80019da:	f7ff fbe4 	bl	80011a6 <MUSART_vTransmitString>
 80019de:	e02d      	b.n	8001a3c <BOOT_vReceiveDataRecord+0x128>
			else 							  { MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPSEND=51\r\n"); }
 80019e0:	4948      	ldr	r1, [pc, #288]	; (8001b04 <BOOT_vReceiveDataRecord+0x1f0>)
 80019e2:	4842      	ldr	r0, [pc, #264]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 80019e4:	f7ff fbdf 	bl	80011a6 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 80019e8:	e028      	b.n	8001a3c <BOOT_vReceiveDataRecord+0x128>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 80019ea:	4941      	ldr	r1, [pc, #260]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 80019ec:	483f      	ldr	r0, [pc, #252]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 80019ee:	f7ff fbf9 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'v') { BOOT_u8ContFlag = 2; break; } 	 	/* 'v' Means 'link is not valid' --> Connect Again */
 80019f2:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b76      	cmp	r3, #118	; 0x76
 80019f8:	d103      	bne.n	8001a02 <BOOT_vReceiveDataRecord+0xee>
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e020      	b.n	8001a44 <BOOT_vReceiveDataRecord+0x130>
				else if (BOOT_u8Buffer == 'O') { 								/* if 'O', Read Next Element */
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b4f      	cmp	r3, #79	; 0x4f
 8001a08:	d10b      	bne.n	8001a22 <BOOT_vReceiveDataRecord+0x10e>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001a0a:	4939      	ldr	r1, [pc, #228]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a0c:	4837      	ldr	r0, [pc, #220]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001a0e:	f7ff fbe9 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b4b      	cmp	r3, #75	; 0x4b
 8001a18:	d10a      	bne.n	8001a30 <BOOT_vReceiveDataRecord+0x11c>
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e010      	b.n	8001a44 <BOOT_vReceiveDataRecord+0x130>
				} else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }	/* 'b' Means 'busy' --> Reset the Module */
 8001a22:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b62      	cmp	r3, #98	; 0x62
 8001a28:	d102      	bne.n	8001a30 <BOOT_vReceiveDataRecord+0x11c>
 8001a2a:	f7ff fe5b 	bl	80016e4 <BOOT_vInitESP>
 8001a2e:	e009      	b.n	8001a44 <BOOT_vReceiveDataRecord+0x130>
				BOOT_u8TimeOut++;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 8001a3a:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <BOOT_vReceiveDataRecord+0x1d0>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b0e      	cmp	r3, #14
 8001a42:	d9d2      	bls.n	80019ea <BOOT_vReceiveDataRecord+0xd6>
			}
		} while (BOOT_u8ContFlag == 0);
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0b1      	beq.n	80019b0 <BOOT_vReceiveDataRecord+0x9c>
		/* Get the Data Record from the Website */
		if (BOOT_u8ContFlag != 2) {
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <BOOT_vReceiveDataRecord+0x1cc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d039      	beq.n	8001ac8 <BOOT_vReceiveDataRecord+0x1b4>
			MUSART_vTransmitString(BOOT_USART,(u8*)"GET http://sobhhhh.freevar.com/getline.php?line=");
 8001a54:	492c      	ldr	r1, [pc, #176]	; (8001b08 <BOOT_vReceiveDataRecord+0x1f4>)
 8001a56:	4825      	ldr	r0, [pc, #148]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001a58:	f7ff fba5 	bl	80011a6 <MUSART_vTransmitString>
		    if (BOOT_u8CounterD2 != '0') {											/* If Not '0' --> Hundreds */
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <BOOT_vReceiveDataRecord+0x1e0>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b30      	cmp	r3, #48	; 0x30
 8001a62:	d012      	beq.n	8001a8a <BOOT_vReceiveDataRecord+0x176>
		    	MUSART_vTransmitByte(BOOT_USART,BOOT_u8CounterD2);
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <BOOT_vReceiveDataRecord+0x1e0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4820      	ldr	r0, [pc, #128]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001a6c:	f7ff fb78 	bl	8001160 <MUSART_vTransmitByte>
		        MUSART_vTransmitByte(BOOT_USART,BOOT_u8CounterD1);
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <BOOT_vReceiveDataRecord+0x1e8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	481d      	ldr	r0, [pc, #116]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001a78:	f7ff fb72 	bl	8001160 <MUSART_vTransmitByte>
		        MUSART_vTransmitByte(BOOT_USART,BOOT_u8CounterD0);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <BOOT_vReceiveDataRecord+0x1f8>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	481a      	ldr	r0, [pc, #104]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001a84:	f7ff fb6c 	bl	8001160 <MUSART_vTransmitByte>
 8001a88:	e016      	b.n	8001ab8 <BOOT_vReceiveDataRecord+0x1a4>
		    } else if (BOOT_u8CounterD1 != '0') {									/* If Not '0' --> Tens */
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <BOOT_vReceiveDataRecord+0x1e8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b30      	cmp	r3, #48	; 0x30
 8001a90:	d00c      	beq.n	8001aac <BOOT_vReceiveDataRecord+0x198>
		    	MUSART_vTransmitByte(BOOT_USART,BOOT_u8CounterD1);
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <BOOT_vReceiveDataRecord+0x1e8>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4814      	ldr	r0, [pc, #80]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001a9a:	f7ff fb61 	bl	8001160 <MUSART_vTransmitByte>
		        MUSART_vTransmitByte(BOOT_USART,BOOT_u8CounterD0);
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <BOOT_vReceiveDataRecord+0x1f8>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4811      	ldr	r0, [pc, #68]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001aa6:	f7ff fb5b 	bl	8001160 <MUSART_vTransmitByte>
 8001aaa:	e005      	b.n	8001ab8 <BOOT_vReceiveDataRecord+0x1a4>
		    } else { MUSART_vTransmitByte(BOOT_USART,BOOT_u8CounterD0); }		/* If Both '0' --> Ones*/
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <BOOT_vReceiveDataRecord+0x1f8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001ab4:	f7ff fb54 	bl	8001160 <MUSART_vTransmitByte>
		    	MUSART_vTransmitString(BOOT_USART,(u8*)"\r\n");
 8001ab8:	4915      	ldr	r1, [pc, #84]	; (8001b10 <BOOT_vReceiveDataRecord+0x1fc>)
 8001aba:	480c      	ldr	r0, [pc, #48]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001abc:	f7ff fb73 	bl	80011a6 <MUSART_vTransmitString>
		    	/* Receive the Data Record */
		    	MUSART_vReceiveStringSynchBlocking(BOOT_USART, BOOT_u8DataRecord);
 8001ac0:	4914      	ldr	r1, [pc, #80]	; (8001b14 <BOOT_vReceiveDataRecord+0x200>)
 8001ac2:	480a      	ldr	r0, [pc, #40]	; (8001aec <BOOT_vReceiveDataRecord+0x1d8>)
 8001ac4:	f7ff fbba 	bl	800123c <MUSART_vReceiveStringSynchBlocking>
		}
	} while (BOOT_u8DataRecord[21] != ':' && BOOT_u8DataRecord[22] != ':');
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <BOOT_vReceiveDataRecord+0x200>)
 8001aca:	7d5b      	ldrb	r3, [r3, #21]
 8001acc:	2b3a      	cmp	r3, #58	; 0x3a
 8001ace:	d004      	beq.n	8001ada <BOOT_vReceiveDataRecord+0x1c6>
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <BOOT_vReceiveDataRecord+0x200>)
 8001ad2:	7d9b      	ldrb	r3, [r3, #22]
 8001ad4:	2b3a      	cmp	r3, #58	; 0x3a
 8001ad6:	f47f af1f 	bne.w	8001918 <BOOT_vReceiveDataRecord+0x4>
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200000fc 	.word	0x200000fc
 8001ae4:	200000fe 	.word	0x200000fe
 8001ae8:	08002070 	.word	0x08002070
 8001aec:	40011000 	.word	0x40011000
 8001af0:	200000fb 	.word	0x200000fb
 8001af4:	20000002 	.word	0x20000002
 8001af8:	080020dc 	.word	0x080020dc
 8001afc:	20000001 	.word	0x20000001
 8001b00:	080020ec 	.word	0x080020ec
 8001b04:	080020fc 	.word	0x080020fc
 8001b08:	0800210c 	.word	0x0800210c
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	08002140 	.word	0x08002140
 8001b14:	20000088 	.word	0x20000088

08001b18 <BOOT_vFlashRecord>:

void BOOT_vFlashRecord(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	SHPR_voidParseHexRecord(&BOOT_u8DataRecord[22]);
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <BOOT_vFlashRecord+0x30>)
 8001b1e:	f7ff fc1b 	bl	8001358 <SHPR_voidParseHexRecord>
	BOOT_u8RecordLength = SHPR_u8GetRecordLength(&BOOT_u8DataRecord[22]);
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <BOOT_vFlashRecord+0x30>)
 8001b24:	f7ff fcf8 	bl	8001518 <SHPR_u8GetRecordLength>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <BOOT_vFlashRecord+0x34>)
 8001b2e:	701a      	strb	r2, [r3, #0]
	SHPR_voidParseHexRecord(&BOOT_u8DataRecord[35+(BOOT_u8RecordLength*2)]);
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <BOOT_vFlashRecord+0x34>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	3323      	adds	r3, #35	; 0x23
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <BOOT_vFlashRecord+0x38>)
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fc0b 	bl	8001358 <SHPR_voidParseHexRecord>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000009e 	.word	0x2000009e
 8001b4c:	200000fd 	.word	0x200000fd
 8001b50:	20000088 	.word	0x20000088

08001b54 <BOOT_vUpdateFirmwareStatus>:

void BOOT_vUpdateFirmwareStatus(void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	do {
		/* Connect using TCP Protocol */
		do {
			BOOT_u8ContFlag = 0;
 8001b58:	4b82      	ldr	r3, [pc, #520]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001b5e:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPSTART=\"TCP\",\"69.197.143.14\",80\r\n");
 8001b64:	4981      	ldr	r1, [pc, #516]	; (8001d6c <BOOT_vUpdateFirmwareStatus+0x218>)
 8001b66:	4882      	ldr	r0, [pc, #520]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001b68:	f7ff fb1d 	bl	80011a6 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001b6c:	e030      	b.n	8001bd0 <BOOT_vUpdateFirmwareStatus+0x7c>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001b6e:	4981      	ldr	r1, [pc, #516]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001b70:	487f      	ldr	r0, [pc, #508]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001b72:	f7ff fb37 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }	/* 'b' Means 'busy' --> Reset the Module */
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b62      	cmp	r3, #98	; 0x62
 8001b7c:	d102      	bne.n	8001b84 <BOOT_vUpdateFirmwareStatus+0x30>
 8001b7e:	f7ff fdb1 	bl	80016e4 <BOOT_vInitESP>
 8001b82:	e029      	b.n	8001bd8 <BOOT_vUpdateFirmwareStatus+0x84>
				else if (BOOT_u8Buffer == 'O') { 								/* if 'O', Read Next Element */
 8001b84:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b4f      	cmp	r3, #79	; 0x4f
 8001b8a:	d10b      	bne.n	8001ba4 <BOOT_vUpdateFirmwareStatus+0x50>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001b8c:	4979      	ldr	r1, [pc, #484]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001b8e:	4878      	ldr	r0, [pc, #480]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001b90:	f7ff fb28 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }	/* 'K' Means 'CONNECT\r\nOK' --> break */
 8001b94:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b4b      	cmp	r3, #75	; 0x4b
 8001b9a:	d113      	bne.n	8001bc4 <BOOT_vUpdateFirmwareStatus+0x70>
 8001b9c:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e019      	b.n	8001bd8 <BOOT_vUpdateFirmwareStatus+0x84>
				} else if (BOOT_u8Buffer == 'Y') { 								/* if 'Y', Read Next Element */
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b59      	cmp	r3, #89	; 0x59
 8001baa:	d10b      	bne.n	8001bc4 <BOOT_vUpdateFirmwareStatus+0x70>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001bac:	4971      	ldr	r1, [pc, #452]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001bae:	4870      	ldr	r0, [pc, #448]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001bb0:	f7ff fb18 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == ' ') { BOOT_u8ContFlag = 1; break; }	/* ' ' Means 'ALREADY CONNECTED' --> break */
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d103      	bne.n	8001bc4 <BOOT_vUpdateFirmwareStatus+0x70>
 8001bbc:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e009      	b.n	8001bd8 <BOOT_vUpdateFirmwareStatus+0x84>
				}
				BOOT_u8TimeOut++;
 8001bc4:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001bce:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001bd0:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b0e      	cmp	r3, #14
 8001bd6:	d9ca      	bls.n	8001b6e <BOOT_vUpdateFirmwareStatus+0x1a>
			}
		} while(BOOT_u8ContFlag == 0);
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0bb      	beq.n	8001b58 <BOOT_vUpdateFirmwareStatus+0x4>
		/* TCP is now Connected, Send Data Length
		 * AT+CIPSEND=<DataLength>
		 * BOOT_u8ContFlag = 2 --> Skip Data Get URL Command
		 */
		do {
			BOOT_u8ContFlag = 0;
 8001be0:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPSEND=50\r\n");
 8001bec:	4962      	ldr	r1, [pc, #392]	; (8001d78 <BOOT_vUpdateFirmwareStatus+0x224>)
 8001bee:	4860      	ldr	r0, [pc, #384]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001bf0:	f7ff fad9 	bl	80011a6 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001bf4:	e028      	b.n	8001c48 <BOOT_vUpdateFirmwareStatus+0xf4>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001bf6:	495f      	ldr	r1, [pc, #380]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001bf8:	485d      	ldr	r0, [pc, #372]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001bfa:	f7ff faf3 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'v') { BOOT_u8ContFlag = 2; break; } 	/* 'v' Means 'link is not valid' --> Connect Again */
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b76      	cmp	r3, #118	; 0x76
 8001c04:	d103      	bne.n	8001c0e <BOOT_vUpdateFirmwareStatus+0xba>
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e020      	b.n	8001c50 <BOOT_vUpdateFirmwareStatus+0xfc>
				else if (BOOT_u8Buffer == 'O') { 								 	 /* if 'O', Read Next Element */
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b4f      	cmp	r3, #79	; 0x4f
 8001c14:	d10b      	bne.n	8001c2e <BOOT_vUpdateFirmwareStatus+0xda>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001c16:	4957      	ldr	r1, [pc, #348]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c18:	4855      	ldr	r0, [pc, #340]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001c1a:	f7ff fae3 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		 /* 'K' Means '\r\nOK' --> break */
 8001c1e:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b4b      	cmp	r3, #75	; 0x4b
 8001c24:	d10a      	bne.n	8001c3c <BOOT_vUpdateFirmwareStatus+0xe8>
 8001c26:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e010      	b.n	8001c50 <BOOT_vUpdateFirmwareStatus+0xfc>
				}  else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; } /* 'b' Means 'busy' --> Reset the Module */
 8001c2e:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b62      	cmp	r3, #98	; 0x62
 8001c34:	d102      	bne.n	8001c3c <BOOT_vUpdateFirmwareStatus+0xe8>
 8001c36:	f7ff fd55 	bl	80016e4 <BOOT_vInitESP>
 8001c3a:	e009      	b.n	8001c50 <BOOT_vUpdateFirmwareStatus+0xfc>
				BOOT_u8TimeOut++;
 8001c3c:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001c46:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001c48:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b0e      	cmp	r3, #14
 8001c4e:	d9d2      	bls.n	8001bf6 <BOOT_vUpdateFirmwareStatus+0xa2>
			}
		} while (BOOT_u8ContFlag == 0);
 8001c50:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0c3      	beq.n	8001be0 <BOOT_vUpdateFirmwareStatus+0x8c>
		/* Length is now Sent, Start Sending Data */
		if (BOOT_u8ContFlag != 2) {
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d02f      	beq.n	8001cc0 <BOOT_vUpdateFirmwareStatus+0x16c>
			BOOT_u8ContFlag = 0;
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(BOOT_USART,(u8*)"GET http://sobhhhh.freevar.com/getline.php?end\r\n");
 8001c6c:	4943      	ldr	r1, [pc, #268]	; (8001d7c <BOOT_vUpdateFirmwareStatus+0x228>)
 8001c6e:	4840      	ldr	r0, [pc, #256]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001c70:	f7ff fa99 	bl	80011a6 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001c74:	e020      	b.n	8001cb8 <BOOT_vUpdateFirmwareStatus+0x164>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001c76:	493f      	ldr	r1, [pc, #252]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c78:	483d      	ldr	r0, [pc, #244]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001c7a:	f7ff fab3 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'O') { 										 /* if 'O', Read Next Element */
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b4f      	cmp	r3, #79	; 0x4f
 8001c84:	d10b      	bne.n	8001c9e <BOOT_vUpdateFirmwareStatus+0x14a>
					MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001c86:	493b      	ldr	r1, [pc, #236]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c88:	4839      	ldr	r0, [pc, #228]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001c8a:	f7ff faab 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		 /* 'K' Means '\r\nOK' --> break */
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b4b      	cmp	r3, #75	; 0x4b
 8001c94:	d10a      	bne.n	8001cac <BOOT_vUpdateFirmwareStatus+0x158>
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e010      	b.n	8001cc0 <BOOT_vUpdateFirmwareStatus+0x16c>
				}  else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; } /* 'b' Means 'busy' --> Reset the Module */
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b62      	cmp	r3, #98	; 0x62
 8001ca4:	d102      	bne.n	8001cac <BOOT_vUpdateFirmwareStatus+0x158>
 8001ca6:	f7ff fd1d 	bl	80016e4 <BOOT_vInitESP>
 8001caa:	e009      	b.n	8001cc0 <BOOT_vUpdateFirmwareStatus+0x16c>
				BOOT_u8TimeOut++;
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001cb6:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b0e      	cmp	r3, #14
 8001cbe:	d9da      	bls.n	8001c76 <BOOT_vUpdateFirmwareStatus+0x122>
			}
		}
	} while (BOOT_u8ContFlag == 0 || BOOT_u8ContFlag == 2);
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f43f af47 	beq.w	8001b58 <BOOT_vUpdateFirmwareStatus+0x4>
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	f43f af42 	beq.w	8001b58 <BOOT_vUpdateFirmwareStatus+0x4>
	do {
		BOOT_u8ContFlag = 0;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
		BOOT_u8TimeOut = 0;
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
		MUSART_vTransmitString(BOOT_USART,(u8*)"AT+CIPCLOSE\r\n");
 8001ce0:	4927      	ldr	r1, [pc, #156]	; (8001d80 <BOOT_vUpdateFirmwareStatus+0x22c>)
 8001ce2:	4823      	ldr	r0, [pc, #140]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001ce4:	f7ff fa5f 	bl	80011a6 <MUSART_vTransmitString>
		/* Read Buffer */
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001ce8:	e030      	b.n	8001d4c <BOOT_vUpdateFirmwareStatus+0x1f8>
			MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001cea:	4922      	ldr	r1, [pc, #136]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001cec:	4820      	ldr	r0, [pc, #128]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001cee:	f7ff fa79 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
			if (BOOT_u8Buffer == 'O') { 											/* if 'O', Read Next Element */
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b4f      	cmp	r3, #79	; 0x4f
 8001cf8:	d10b      	bne.n	8001d12 <BOOT_vUpdateFirmwareStatus+0x1be>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001cfa:	491e      	ldr	r1, [pc, #120]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001cfc:	481c      	ldr	r0, [pc, #112]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001cfe:	f7ff fa71 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }			/* 'K' Means '\r\nOK' --> break */
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b4b      	cmp	r3, #75	; 0x4b
 8001d08:	d11a      	bne.n	8001d40 <BOOT_vUpdateFirmwareStatus+0x1ec>
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e020      	b.n	8001d54 <BOOT_vUpdateFirmwareStatus+0x200>
			} else if (BOOT_u8Buffer == 'E') { 										/* if 'E', Read Next Element */
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b45      	cmp	r3, #69	; 0x45
 8001d18:	d10b      	bne.n	8001d32 <BOOT_vUpdateFirmwareStatus+0x1de>
				MUSART_u8ReceiveByteSynchBlocking(BOOT_USART, &BOOT_u8Buffer);
 8001d1a:	4916      	ldr	r1, [pc, #88]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001d1c:	4814      	ldr	r0, [pc, #80]	; (8001d70 <BOOT_vUpdateFirmwareStatus+0x21c>)
 8001d1e:	f7ff fa61 	bl	80011e4 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 1; break; }			/* 'R' Means '\r\nERROR' --> break */
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b52      	cmp	r3, #82	; 0x52
 8001d28:	d10a      	bne.n	8001d40 <BOOT_vUpdateFirmwareStatus+0x1ec>
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e010      	b.n	8001d54 <BOOT_vUpdateFirmwareStatus+0x200>
			} else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <BOOT_vUpdateFirmwareStatus+0x220>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b62      	cmp	r3, #98	; 0x62
 8001d38:	d102      	bne.n	8001d40 <BOOT_vUpdateFirmwareStatus+0x1ec>
 8001d3a:	f7ff fcd3 	bl	80016e4 <BOOT_vInitESP>
 8001d3e:	e009      	b.n	8001d54 <BOOT_vUpdateFirmwareStatus+0x200>
			BOOT_u8TimeOut++;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <BOOT_vUpdateFirmwareStatus+0x214>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b0e      	cmp	r3, #14
 8001d52:	d9ca      	bls.n	8001cea <BOOT_vUpdateFirmwareStatus+0x196>
		}
	} while (BOOT_u8ContFlag == 0);
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <BOOT_vUpdateFirmwareStatus+0x210>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0bb      	beq.n	8001cd4 <BOOT_vUpdateFirmwareStatus+0x180>
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200000fc 	.word	0x200000fc
 8001d68:	200000fe 	.word	0x200000fe
 8001d6c:	08002070 	.word	0x08002070
 8001d70:	40011000 	.word	0x40011000
 8001d74:	200000fb 	.word	0x200000fb
 8001d78:	08002098 	.word	0x08002098
 8001d7c:	08002144 	.word	0x08002144
 8001d80:	0800203c 	.word	0x0800203c

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f000 f90a 	bl	8001fcc <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20010000 	.word	0x20010000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000100 	.word	0x20000100
 8001dec:	20000250 	.word	0x20000250

08001df0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dfa:	490d      	ldr	r1, [pc, #52]	; (8001e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <LoopForever+0xe>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e10:	4c0a      	ldr	r4, [pc, #40]	; (8001e3c <LoopForever+0x16>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e1e:	f000 f8db 	bl	8001fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e22:	f7ff fb93 	bl	800154c <main>

08001e26 <LoopForever>:

LoopForever:
  b LoopForever
 8001e26:	e7fe      	b.n	8001e26 <LoopForever>
  ldr   r0, =_estack
 8001e28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001e34:	08002180 	.word	0x08002180
  ldr r2, =_sbss
 8001e38:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001e3c:	2000024c 	.word	0x2000024c

08001e40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC_IRQHandler>
	...

08001e44 <malloc>:
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <malloc+0xc>)
 8001e46:	4601      	mov	r1, r0
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	f000 b823 	b.w	8001e94 <_malloc_r>
 8001e4e:	bf00      	nop
 8001e50:	20000050 	.word	0x20000050

08001e54 <sbrk_aligned>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0e      	ldr	r6, [pc, #56]	; (8001e90 <sbrk_aligned+0x3c>)
 8001e58:	460c      	mov	r4, r1
 8001e5a:	6831      	ldr	r1, [r6, #0]
 8001e5c:	4605      	mov	r5, r0
 8001e5e:	b911      	cbnz	r1, 8001e66 <sbrk_aligned+0x12>
 8001e60:	f000 f8a4 	bl	8001fac <_sbrk_r>
 8001e64:	6030      	str	r0, [r6, #0]
 8001e66:	4621      	mov	r1, r4
 8001e68:	4628      	mov	r0, r5
 8001e6a:	f000 f89f 	bl	8001fac <_sbrk_r>
 8001e6e:	1c43      	adds	r3, r0, #1
 8001e70:	d00a      	beq.n	8001e88 <sbrk_aligned+0x34>
 8001e72:	1cc4      	adds	r4, r0, #3
 8001e74:	f024 0403 	bic.w	r4, r4, #3
 8001e78:	42a0      	cmp	r0, r4
 8001e7a:	d007      	beq.n	8001e8c <sbrk_aligned+0x38>
 8001e7c:	1a21      	subs	r1, r4, r0
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f000 f894 	bl	8001fac <_sbrk_r>
 8001e84:	3001      	adds	r0, #1
 8001e86:	d101      	bne.n	8001e8c <sbrk_aligned+0x38>
 8001e88:	f04f 34ff 	mov.w	r4, #4294967295
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	20000108 	.word	0x20000108

08001e94 <_malloc_r>:
 8001e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e98:	1ccd      	adds	r5, r1, #3
 8001e9a:	f025 0503 	bic.w	r5, r5, #3
 8001e9e:	3508      	adds	r5, #8
 8001ea0:	2d0c      	cmp	r5, #12
 8001ea2:	bf38      	it	cc
 8001ea4:	250c      	movcc	r5, #12
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	4607      	mov	r7, r0
 8001eaa:	db01      	blt.n	8001eb0 <_malloc_r+0x1c>
 8001eac:	42a9      	cmp	r1, r5
 8001eae:	d905      	bls.n	8001ebc <_malloc_r+0x28>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	4630      	mov	r0, r6
 8001eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f90 <_malloc_r+0xfc>
 8001ec0:	f000 f868 	bl	8001f94 <__malloc_lock>
 8001ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8001ec8:	461c      	mov	r4, r3
 8001eca:	bb5c      	cbnz	r4, 8001f24 <_malloc_r+0x90>
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4638      	mov	r0, r7
 8001ed0:	f7ff ffc0 	bl	8001e54 <sbrk_aligned>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	d155      	bne.n	8001f86 <_malloc_r+0xf2>
 8001eda:	f8d8 4000 	ldr.w	r4, [r8]
 8001ede:	4626      	mov	r6, r4
 8001ee0:	2e00      	cmp	r6, #0
 8001ee2:	d145      	bne.n	8001f70 <_malloc_r+0xdc>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d048      	beq.n	8001f7a <_malloc_r+0xe6>
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	4631      	mov	r1, r6
 8001eec:	4638      	mov	r0, r7
 8001eee:	eb04 0903 	add.w	r9, r4, r3
 8001ef2:	f000 f85b 	bl	8001fac <_sbrk_r>
 8001ef6:	4581      	cmp	r9, r0
 8001ef8:	d13f      	bne.n	8001f7a <_malloc_r+0xe6>
 8001efa:	6821      	ldr	r1, [r4, #0]
 8001efc:	1a6d      	subs	r5, r5, r1
 8001efe:	4629      	mov	r1, r5
 8001f00:	4638      	mov	r0, r7
 8001f02:	f7ff ffa7 	bl	8001e54 <sbrk_aligned>
 8001f06:	3001      	adds	r0, #1
 8001f08:	d037      	beq.n	8001f7a <_malloc_r+0xe6>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	442b      	add	r3, r5
 8001f0e:	6023      	str	r3, [r4, #0]
 8001f10:	f8d8 3000 	ldr.w	r3, [r8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d038      	beq.n	8001f8a <_malloc_r+0xf6>
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	42a2      	cmp	r2, r4
 8001f1c:	d12b      	bne.n	8001f76 <_malloc_r+0xe2>
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e00f      	b.n	8001f44 <_malloc_r+0xb0>
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	1b52      	subs	r2, r2, r5
 8001f28:	d41f      	bmi.n	8001f6a <_malloc_r+0xd6>
 8001f2a:	2a0b      	cmp	r2, #11
 8001f2c:	d917      	bls.n	8001f5e <_malloc_r+0xca>
 8001f2e:	1961      	adds	r1, r4, r5
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	6025      	str	r5, [r4, #0]
 8001f34:	bf18      	it	ne
 8001f36:	6059      	strne	r1, [r3, #4]
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	bf08      	it	eq
 8001f3c:	f8c8 1000 	streq.w	r1, [r8]
 8001f40:	5162      	str	r2, [r4, r5]
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	4638      	mov	r0, r7
 8001f46:	f104 060b 	add.w	r6, r4, #11
 8001f4a:	f000 f829 	bl	8001fa0 <__malloc_unlock>
 8001f4e:	f026 0607 	bic.w	r6, r6, #7
 8001f52:	1d23      	adds	r3, r4, #4
 8001f54:	1af2      	subs	r2, r6, r3
 8001f56:	d0ae      	beq.n	8001eb6 <_malloc_r+0x22>
 8001f58:	1b9b      	subs	r3, r3, r6
 8001f5a:	50a3      	str	r3, [r4, r2]
 8001f5c:	e7ab      	b.n	8001eb6 <_malloc_r+0x22>
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	d1dd      	bne.n	8001f20 <_malloc_r+0x8c>
 8001f64:	f8c8 2000 	str.w	r2, [r8]
 8001f68:	e7ec      	b.n	8001f44 <_malloc_r+0xb0>
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	6864      	ldr	r4, [r4, #4]
 8001f6e:	e7ac      	b.n	8001eca <_malloc_r+0x36>
 8001f70:	4634      	mov	r4, r6
 8001f72:	6876      	ldr	r6, [r6, #4]
 8001f74:	e7b4      	b.n	8001ee0 <_malloc_r+0x4c>
 8001f76:	4613      	mov	r3, r2
 8001f78:	e7cc      	b.n	8001f14 <_malloc_r+0x80>
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4638      	mov	r0, r7
 8001f80:	f000 f80e 	bl	8001fa0 <__malloc_unlock>
 8001f84:	e797      	b.n	8001eb6 <_malloc_r+0x22>
 8001f86:	6025      	str	r5, [r4, #0]
 8001f88:	e7dc      	b.n	8001f44 <_malloc_r+0xb0>
 8001f8a:	605b      	str	r3, [r3, #4]
 8001f8c:	deff      	udf	#255	; 0xff
 8001f8e:	bf00      	nop
 8001f90:	20000104 	.word	0x20000104

08001f94 <__malloc_lock>:
 8001f94:	4801      	ldr	r0, [pc, #4]	; (8001f9c <__malloc_lock+0x8>)
 8001f96:	f000 b843 	b.w	8002020 <__retarget_lock_acquire_recursive>
 8001f9a:	bf00      	nop
 8001f9c:	20000248 	.word	0x20000248

08001fa0 <__malloc_unlock>:
 8001fa0:	4801      	ldr	r0, [pc, #4]	; (8001fa8 <__malloc_unlock+0x8>)
 8001fa2:	f000 b83e 	b.w	8002022 <__retarget_lock_release_recursive>
 8001fa6:	bf00      	nop
 8001fa8:	20000248 	.word	0x20000248

08001fac <_sbrk_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	4d06      	ldr	r5, [pc, #24]	; (8001fc8 <_sbrk_r+0x1c>)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	602b      	str	r3, [r5, #0]
 8001fb8:	f7ff fee4 	bl	8001d84 <_sbrk>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk_r+0x1a>
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	b103      	cbz	r3, 8001fc6 <_sbrk_r+0x1a>
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	20000244 	.word	0x20000244

08001fcc <__errno>:
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <__errno+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000050 	.word	0x20000050

08001fd8 <__libc_init_array>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	4d0d      	ldr	r5, [pc, #52]	; (8002010 <__libc_init_array+0x38>)
 8001fdc:	4c0d      	ldr	r4, [pc, #52]	; (8002014 <__libc_init_array+0x3c>)
 8001fde:	1b64      	subs	r4, r4, r5
 8001fe0:	10a4      	asrs	r4, r4, #2
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	42a6      	cmp	r6, r4
 8001fe6:	d109      	bne.n	8001ffc <__libc_init_array+0x24>
 8001fe8:	4d0b      	ldr	r5, [pc, #44]	; (8002018 <__libc_init_array+0x40>)
 8001fea:	4c0c      	ldr	r4, [pc, #48]	; (800201c <__libc_init_array+0x44>)
 8001fec:	f000 f81a 	bl	8002024 <_init>
 8001ff0:	1b64      	subs	r4, r4, r5
 8001ff2:	10a4      	asrs	r4, r4, #2
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	42a6      	cmp	r6, r4
 8001ff8:	d105      	bne.n	8002006 <__libc_init_array+0x2e>
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002000:	4798      	blx	r3
 8002002:	3601      	adds	r6, #1
 8002004:	e7ee      	b.n	8001fe4 <__libc_init_array+0xc>
 8002006:	f855 3b04 	ldr.w	r3, [r5], #4
 800200a:	4798      	blx	r3
 800200c:	3601      	adds	r6, #1
 800200e:	e7f2      	b.n	8001ff6 <__libc_init_array+0x1e>
 8002010:	08002178 	.word	0x08002178
 8002014:	08002178 	.word	0x08002178
 8002018:	08002178 	.word	0x08002178
 800201c:	0800217c 	.word	0x0800217c

08002020 <__retarget_lock_acquire_recursive>:
 8002020:	4770      	bx	lr

08002022 <__retarget_lock_release_recursive>:
 8002022:	4770      	bx	lr

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
