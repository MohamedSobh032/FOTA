
Project_FOTA_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f90  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800225c  0800225c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  0800225c  0800225c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800225c  0800225c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000058  080022bc  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080022bc  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ec9  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000911  00000000  00000000  00021f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d8  00000000  00000000  000228a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000203  00000000  00000000  00022b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020a5  00000000  00000000  00022d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f74  00000000  00000000  00024e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a387  00000000  00000000  00026d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000dac  00000000  00000000  00031124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00031ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000058 	.word	0x20000058
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002110 	.word	0x08002110

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	08002110 	.word	0x08002110

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <MFMI_vInit>:
/* Func. Name: MFMI_vInit                        */
/* i/p arguments: nothing 					     */
/* o/p arguments: nothing                        */
/* Desc. : This API initializes the Flash Driver */
/*************************************************/
void MFMI_vInit(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* Unlock the Flash */
	Private_vFlashUnlock();
 80009b8:	f000 f8a6 	bl	8000b08 <Private_vFlashUnlock>
	/* Set the Programming Size */
	WRITE_BITS(FMI->CR,MFMI_PROGRAM_SIZE,TWO_BITS,MFMI_CR_PSIZE_BIT);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MFMI_vInit+0x20>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <MFMI_vInit+0x20>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	6113      	str	r3, [r2, #16]
	/* Lock the Flash */
	Private_vFlashLock();
 80009cc:	f000 f88c 	bl	8000ae8 <Private_vFlashLock>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <MFMI_vSectorErase>:
/* i/p arguments: Copy_u8SectorNumber: Sector to be Erased */
/* o/p arguments: nothing                              	   */
/* Desc. : This API Erases a Full Sector in the Flash      */
/***********************************************************/
void MFMI_vSectorErase(u8 Copy_u8SectorNumber)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	/* Wait for the Flash to be not Busy */
	while(GET_BIT(FMI->SR,MFMI_SR_BSY_BIT));
 80009e2:	bf00      	nop
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f9      	bne.n	80009e4 <MFMI_vSectorErase+0xc>
	/* Unlock the Flash */
	Private_vFlashUnlock();
 80009f0:	f000 f88a 	bl	8000b08 <Private_vFlashUnlock>
	/* Select Sector Number */
	WRITE_BITS(FMI->CR,Copy_u8SectorNumber,FOUR_BITS,MFMI_CR_SNB_BIT);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4619      	mov	r1, r3
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8000a02:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a04:	430b      	orrs	r3, r1
 8000a06:	6113      	str	r3, [r2, #16]
	/* Select Erase Operation */
	SET_BIT(FMI->CR,MFMI_CR_SER_BIT);
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	6113      	str	r3, [r2, #16]
	/* Start Operation */
	SET_BIT(FMI->CR,MFMI_CR_STRT_BIT);
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a1e:	6113      	str	r3, [r2, #16]
	/* Wait for the Flash to be not Busy */
	while(GET_BIT(FMI->SR,MFMI_SR_BSY_BIT));
 8000a20:	bf00      	nop
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f9      	bne.n	8000a22 <MFMI_vSectorErase+0x4a>
	/* Clear EOP by Writing 1 */
	SET_BIT(FMI->SR,MFMI_SR_EOP_BIT);
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	60d3      	str	r3, [r2, #12]
	/* Deselect Erase Operation */
	CLR_BIT(FMI->CR,MFMI_CR_SER_BIT);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <MFMI_vSectorErase+0x7c>)
 8000a40:	f023 0302 	bic.w	r3, r3, #2
 8000a44:	6113      	str	r3, [r2, #16]
	/* Lock the Flash */
	Private_vFlashLock();
 8000a46:	f000 f84f 	bl	8000ae8 <Private_vFlashLock>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <MFMI_vProgram>:
/* i/p arguments: Copy_u16Length: Array Size 									 */
/* o/p arguments: nothing                              				   			 */
/* Desc. : This API Flashes an Array at a Specific Address 			   			 */
/*********************************************************************************/
void MFMI_vProgram(u32 Copy_u32Address, u16* Copy_u16DataToBeWritten, u16 Copy_u16Length)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	4613      	mov	r3, r2
 8000a64:	80fb      	strh	r3, [r7, #6]
	/* Wait for the Flash to be not Busy */
	while(GET_BIT(FMI->SR,MFMI_SR_BSY_BIT));
 8000a66:	bf00      	nop
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f9      	bne.n	8000a68 <MFMI_vProgram+0x10>
	/* Unlock the Flash */
	Private_vFlashUnlock();
 8000a74:	f000 f848 	bl	8000b08 <Private_vFlashUnlock>
	/* Select Programming Operation */
	SET_BIT(FMI->CR,MFMI_CR_PG_BIT);
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6113      	str	r3, [r2, #16]
	/* Write The Data to be Written */
	u16 Local_u16Counter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	82fb      	strh	r3, [r7, #22]
	for (Local_u16Counter = 0; Local_u16Counter < Copy_u16Length; Local_u16Counter++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	82fb      	strh	r3, [r7, #22]
 8000a8c:	e019      	b.n	8000ac2 <MFMI_vProgram+0x6a>
	{
		*(volatile u16*)Copy_u32Address = Copy_u16DataToBeWritten[Local_u16Counter];
 8000a8e:	8afb      	ldrh	r3, [r7, #22]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	441a      	add	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	8812      	ldrh	r2, [r2, #0]
 8000a9a:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
		/* Wait for the Flash to be not Busy */
		while(GET_BIT(FMI->SR,MFMI_SR_BSY_BIT));
 8000aa2:	bf00      	nop
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f9      	bne.n	8000aa4 <MFMI_vProgram+0x4c>
		/* Clear EOP by Writing 1 */
		SET_BIT(FMI->SR,MFMI_SR_EOP_BIT);
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	60d3      	str	r3, [r2, #12]
	for (Local_u16Counter = 0; Local_u16Counter < Copy_u16Length; Local_u16Counter++)
 8000abc:	8afb      	ldrh	r3, [r7, #22]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	82fb      	strh	r3, [r7, #22]
 8000ac2:	8afa      	ldrh	r2, [r7, #22]
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d3e1      	bcc.n	8000a8e <MFMI_vProgram+0x36>
	}
	/* Deselect Programming Operation */
	CLR_BIT(FMI->CR,MFMI_CR_PG_BIT);
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <MFMI_vProgram+0x8c>)
 8000ad0:	f023 0301 	bic.w	r3, r3, #1
 8000ad4:	6113      	str	r3, [r2, #16]
	/* Lock the Flash */
	Private_vFlashLock();
 8000ad6:	f000 f807 	bl	8000ae8 <Private_vFlashLock>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <Private_vFlashLock>:
/* i/p arguments: nothing 		    */
/* o/p arguments: nothing           */
/* Desc. : This API Locks the Flash */
/************************************/
static void Private_vFlashLock()
{ SET_BIT(FMI->CR,MFMI_CR_LOCK_BIT); }
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <Private_vFlashLock+0x1c>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <Private_vFlashLock+0x1c>)
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	6113      	str	r3, [r2, #16]
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <Private_vFlashUnlock>:
/* i/p arguments: nothing 		      */
/* o/p arguments: nothing             */
/* Desc. : This API Unlocks the Flash */
/**************************************/
static void Private_vFlashUnlock()
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	FMI->KEYR = MFMI_KEYR_KEY1;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <Private_vFlashUnlock+0x1c>)
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <Private_vFlashUnlock+0x20>)
 8000b10:	605a      	str	r2, [r3, #4]
	FMI->KEYR = MFMI_KEYR_KEY2;
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <Private_vFlashUnlock+0x1c>)
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <Private_vFlashUnlock+0x24>)
 8000b16:	605a      	str	r2, [r3, #4]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00
 8000b28:	45670123 	.word	0x45670123
 8000b2c:	cdef89ab 	.word	0xcdef89ab

08000b30 <MGPIO_vSetPinMode>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15       */
/* i/p arguments: Copy_u8Mode: MGPIO_MODE_<Mode Type>             */
/* o/p arguments: nothing                                         */
/* Desc. : This API Allows User to Set the mode of a Specific Pin */
/******************************************************************/
void MGPIO_vSetPinMode(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Mode) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 8000b40:	78bb      	ldrb	r3, [r7, #2]
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d813      	bhi.n	8000b6e <MGPIO_vSetPinMode+0x3e>
    WRITE_BITS(GPIOx->MODER, Copy_u8Mode, TWO_BITS, Copy_GPIOPin * 2);
 8000b46:	78ba      	ldrb	r2, [r7, #2]
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4013      	ands	r3, r2
 8000b64:	ea40 0203 	orr.w	r2, r0, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e000      	b.n	8000b70 <MGPIO_vSetPinMode+0x40>
    if (Copy_u8Mode > MGPIO_MODE_ANALOG) { return; /* Do Nothing */ }
 8000b6e:	bf00      	nop
}
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <MGPIO_vSetPinOutputType>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15              */
/* i/p arguments: Copy_u8Type: MGPIO_OUTPUT_TYPE_<Output Type>           */
/* o/p arguments: nothing                                                */
/* Desc. : This API Allows User to Set the Output Type of a Specific Pin */
/*************************************************************************/
void MGPIO_vSetPinOutputType(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8OType) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
 8000b86:	4613      	mov	r3, r2
 8000b88:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8OType > MGPIO_OUTPUT_TYPE_OD) { return; /* Do Nothing */ }
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d811      	bhi.n	8000bb4 <MGPIO_vSetPinOutputType+0x3a>
    WRITE_BITS(GPIOx->OTYPER, Copy_u8OType, ONE_BIT, Copy_GPIOPin);
 8000b90:	78ba      	ldrb	r2, [r7, #2]
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	ea40 0203 	orr.w	r2, r0, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	e000      	b.n	8000bb6 <MGPIO_vSetPinOutputType+0x3c>
    if (Copy_u8OType > MGPIO_OUTPUT_TYPE_OD) { return; /* Do Nothing */ }
 8000bb4:	bf00      	nop
}
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <MGPIO_vSetPinOutputSpeed>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15               */
/* i/p arguments: Copy_u8Speed: MGPIO_<Speed>_SPEED                       */
/* o/p arguments: nothing                                                 */
/* Desc. : This API Allows User to Set the Output Speed of a Specific Pin */
/**************************************************************************/
void MGPIO_vSetPinOutputSpeed(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Speed) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	70bb      	strb	r3, [r7, #2]
    /* i/p Validation */
    if (Copy_u8Speed > MGPIO_VHIGH_SPEED) { return; /* Do Nothing */ }
 8000bd0:	78bb      	ldrb	r3, [r7, #2]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d813      	bhi.n	8000bfe <MGPIO_vSetPinOutputSpeed+0x3e>
    WRITE_BITS(GPIOx->OSPEEDR, Copy_u8Speed, TWO_BITS, Copy_GPIOPin * 2);
 8000bd6:	78ba      	ldrb	r2, [r7, #2]
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2103      	movs	r1, #3
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	ea40 0203 	orr.w	r2, r0, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	e000      	b.n	8000c00 <MGPIO_vSetPinOutputSpeed+0x40>
    if (Copy_u8Speed > MGPIO_VHIGH_SPEED) { return; /* Do Nothing */ }
 8000bfe:	bf00      	nop
}
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <MGPIO_vSetPinAFDirection>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15                   */
/* i/p arguments: Copy_GPIOPinDirection: MGPIO_AF00 --> MGPIO_AF15            */
/* o/p arguments: nothing                                                     */
/* Desc. : This API Allows User to Set the Direction of AF for a Specific Pin */
/******************************************************************************/
void MGPIO_vSetPinAFDirection(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, MGPIO_AF Copy_GPIOAFDir) {
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
 8000c16:	4613      	mov	r3, r2
 8000c18:	70bb      	strb	r3, [r7, #2]
    if (Copy_GPIOPin <= MGPIO_PIN07) { WRITE_BITS(GPIOx->AFRL, Copy_GPIOAFDir, FOUR_BITS, Copy_GPIOPin * 4); }
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	2b07      	cmp	r3, #7
 8000c1e:	d813      	bhi.n	8000c48 <MGPIO_vSetPinAFDirection+0x3e>
 8000c20:	78ba      	ldrb	r2, [r7, #2]
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a1a      	ldr	r2, [r3, #32]
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	210f      	movs	r1, #15
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	ea40 0203 	orr.w	r2, r0, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	621a      	str	r2, [r3, #32]
    else		 					 { WRITE_BITS(GPIOx->AFRH, Copy_GPIOAFDir, FOUR_BITS, (Copy_GPIOPin - 8) * 4); }
}
 8000c46:	e014      	b.n	8000c72 <MGPIO_vSetPinAFDirection+0x68>
    else		 					 { WRITE_BITS(GPIOx->AFRH, Copy_GPIOAFDir, FOUR_BITS, (Copy_GPIOPin - 8) * 4); }
 8000c48:	78ba      	ldrb	r2, [r7, #2]
 8000c4a:	78fb      	ldrb	r3, [r7, #3]
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	3b08      	subs	r3, #8
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	210f      	movs	r1, #15
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	ea40 0203 	orr.w	r2, r0, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <MGPIO_vSetPinValue>:
/* i/p arguments: Copy_GPIOPin: MGPIO_PIN00 --> MGPIO_PIN15        */
/* i/p arguments: Copy_GPIOPinValue: MGPIO_OUTPUT_<Output Value>   */
/* o/p arguments: nothing                                          */
/* Desc. : This API Allows User to Set the Value of a Specific Pin */
/*******************************************************************/
void MGPIO_vSetPinValue(GPIO_t* GPIOx, MGPIO_PIN Copy_GPIOPin, u8 Copy_u8Value) {
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70fb      	strb	r3, [r7, #3]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	70bb      	strb	r3, [r7, #2]
    if      (Copy_u8Value == MGPIO_OUTPUT_HIGH) { SET_BIT(GPIOx->ODR, Copy_GPIOPin); }
 8000c8e:	78bb      	ldrb	r3, [r7, #2]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d109      	bne.n	8000ca8 <MGPIO_vSetPinValue+0x2a>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	615a      	str	r2, [r3, #20]
    else if	(Copy_u8Value == MGPIO_OUTPUT_LOW)  { CLR_BIT(GPIOx->ODR, Copy_GPIOPin); }
}
 8000ca6:	e00c      	b.n	8000cc2 <MGPIO_vSetPinValue+0x44>
    else if	(Copy_u8Value == MGPIO_OUTPUT_LOW)  { CLR_BIT(GPIOx->ODR, Copy_GPIOPin); }
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d109      	bne.n	8000cc2 <MGPIO_vSetPinValue+0x44>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	78fa      	ldrb	r2, [r7, #3]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	43d2      	mvns	r2, r2
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	615a      	str	r2, [r3, #20]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <MRCC_vInitSysAndBusClock>:
/* Func. Name: MRCC_vInitSysAndBusClock 						  */
/* i/p arguments: nothing              	   						  */
/* o/p arguments: nothing              							  */
/* Desc. : This API Initializes the The System CLK and Busses CLK */
/******************************************************************/
void MRCC_vInitSysAndBusClock() {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	#if MRCC_SYSTEM_CLOCK_SOURCE == MRCC_HSI_CLK_SOURCE
		/* Enable HSI */
		SET_BIT(RCC_CR, MRCC_CR_HSION_BIT);
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MRCC_vInitSysAndBusClock+0x6c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <MRCC_vInitSysAndBusClock+0x6c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]
		/* Trim HSI */
		WRITE_BITS(RCC_CR, MRCC_HSI_TRIMMING, FIVE_BITS, MRCC_CR_HSITRIM_BIT);
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MRCC_vInitSysAndBusClock+0x6c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <MRCC_vInitSysAndBusClock+0x6c>)
 8000cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cee:	6013      	str	r3, [r2, #0]
		/* Switch System Clock to HSI */
		WRITE_BITS(RCC_CFGR, MRCC_SW_SWITCH_TO_HSI, TWO_BITS, MRCC_CFGR_SW_BIT);
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	6013      	str	r3, [r2, #0]
		/* booling till HSI is Stable */
		while(!GET_BIT(RCC_CR, MRCC_CR_HSIRDY_BIT));
 8000cfc:	bf00      	nop
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MRCC_vInitSysAndBusClock+0x6c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <MRCC_vInitSysAndBusClock+0x2e>
		while(!GET_BIT(RCC_CR, MRCC_CR_PLLRDY_BIT));
	#else
		#warning "Invalid Clock Source Configuration!"
	#endif
	/* Set the AHB Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_AHB_PRESCALER, FOUR_BITS, MRCC_CFGR_HPRE_BIT);
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6013      	str	r3, [r2, #0]
	/* Set the APB1 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB1_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE1_BIT);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000d20:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d24:	6013      	str	r3, [r2, #0]
	/* Set the APB2 Prescaler */
	WRITE_BITS(RCC_CFGR, MRCC_APB2_PRESCALER, THREE_BITS, MRCC_CFGR_PPRE2_BIT);
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <MRCC_vInitSysAndBusClock+0x70>)
 8000d2c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40023808 	.word	0x40023808

08000d44 <MRCC_vEnablePeriphClock>:
/* i/p arguments: Copy_BusID: MRCC_BUS_AHB1 -->  MRCC_BUS_APB2LP             */
/* i/p arguments: Copy_PeriphID: <PeripheralName>EN || <PeripheralName>LPEN  */
/* o/p arguments: nothing                                                    */
/* Desc. : This API Allows the User to Enable CLK for a Specific Peripheral  */
/*****************************************************************************/
void MRCC_vEnablePeriphClock(MRCC_BUS Copy_BusID, MRCC_PeriphClock Copy_PeriphID) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	switch (Copy_BusID) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	d86a      	bhi.n	8000e30 <MRCC_vEnablePeriphClock+0xec>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <MRCC_vEnablePeriphClock+0x1c>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d81 	.word	0x08000d81
 8000d64:	08000d97 	.word	0x08000d97
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dc3 	.word	0x08000dc3
 8000d70:	08000dd9 	.word	0x08000dd9
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000e05 	.word	0x08000e05
 8000d7c:	08000e1b 	.word	0x08000e1b
		case MRCC_BUS_AHB1:   SET_BIT(RCC_AHB1ENR, Copy_PeriphID);   break;
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <MRCC_vEnablePeriphClock+0xfc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	79ba      	ldrb	r2, [r7, #6]
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <MRCC_vEnablePeriphClock+0xfc>)
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e04d      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2:   SET_BIT(RCC_AHB2ENR, Copy_PeriphID);   break;
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <MRCC_vEnablePeriphClock+0x100>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	79ba      	ldrb	r2, [r7, #6]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <MRCC_vEnablePeriphClock+0x100>)
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e042      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1:   SET_BIT(RCC_APB1ENR, Copy_PeriphID);   break;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MRCC_vEnablePeriphClock+0x104>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	2101      	movs	r1, #1
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	4611      	mov	r1, r2
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MRCC_vEnablePeriphClock+0x104>)
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e037      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2:   SET_BIT(RCC_APB2ENR, Copy_PeriphID);   break;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MRCC_vEnablePeriphClock+0x108>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fa01 f202 	lsl.w	r2, r1, r2
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <MRCC_vEnablePeriphClock+0x108>)
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e02c      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
		case MRCC_BUS_AHB1LP: SET_BIT(RCC_AHB1LPENR, Copy_PeriphID); break;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MRCC_vEnablePeriphClock+0x10c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	79ba      	ldrb	r2, [r7, #6]
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	4611      	mov	r1, r2
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <MRCC_vEnablePeriphClock+0x10c>)
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	e021      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_AHB2LP: SET_BIT(RCC_AHB2LPENR, Copy_PeriphID); break;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MRCC_vEnablePeriphClock+0x110>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	79ba      	ldrb	r2, [r7, #6]
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MRCC_vEnablePeriphClock+0x110>)
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e016      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB1LP: SET_BIT(RCC_APB1LPENR, Copy_PeriphID); break;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MRCC_vEnablePeriphClock+0x114>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	79ba      	ldrb	r2, [r7, #6]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <MRCC_vEnablePeriphClock+0x114>)
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e00b      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        case MRCC_BUS_APB2LP: SET_BIT(RCC_APB2LPENR, Copy_PeriphID); break;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MRCC_vEnablePeriphClock+0x118>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4611      	mov	r1, r2
 8000e28:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <MRCC_vEnablePeriphClock+0x118>)
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e000      	b.n	8000e32 <MRCC_vEnablePeriphClock+0xee>
        default: break;
 8000e30:	bf00      	nop
    }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023830 	.word	0x40023830
 8000e44:	40023834 	.word	0x40023834
 8000e48:	40023840 	.word	0x40023840
 8000e4c:	40023844 	.word	0x40023844
 8000e50:	40023850 	.word	0x40023850
 8000e54:	40023854 	.word	0x40023854
 8000e58:	40023860 	.word	0x40023860
 8000e5c:	40023864 	.word	0x40023864

08000e60 <MSTK_vInit>:
/* Func. Name: MSTK_vInit               */
/* i/p arguments: nothing               */
/* o/p arguments: nothing               */
/* Desc. : This API Initializes SysTick */
/****************************************/
void MSTK_vInit(void) {
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
    /* Disable Systick */
    CLR_BIT(STK_CTRL, MSTK_CTRL_ENABLE_BIT);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MSTK_vInit+0x34>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <MSTK_vInit+0x34>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]
    /* Disable Systick INT */
    CLR_BIT(STK_CTRL, MSTK_CTRL_TICKINT_BIT);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MSTK_vInit+0x34>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <MSTK_vInit+0x34>)
 8000e76:	f023 0302 	bic.w	r3, r3, #2
 8000e7a:	6013      	str	r3, [r2, #0]
    /* Select SysTick CLK Source */
    WRITE_BITS(STK_CTRL, MSTK_CLOCK_SOURCE, ONE_BIT, MSTK_CTRL_CLKSOURCE_BIT);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <MSTK_vInit+0x34>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <MSTK_vInit+0x34>)
 8000e82:	f023 0304 	bic.w	r3, r3, #4
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <MSTK_vBusyWait>:
/* Func. Name: MSTK_vDelay                         */
/* i/p arguments: Copy_u32Ticks                    */
/* o/p arguments: nothing                          */
/* Desc. : This API Make Delay Using SysTick Timer */
/***************************************************/
void MSTK_vBusyWait(u32 Copy_u32Ticks) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    /* Reload the value in the load register */
    STK_LOAD = Copy_u32Ticks;
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <MSTK_vBusyWait+0x4c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
    /* Start Systick */
    SET_BIT(STK_CTRL, MSTK_CTRL_ENABLE_BIT);
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MSTK_vBusyWait+0x50>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <MSTK_vBusyWait+0x50>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6013      	str	r3, [r2, #0]
    /* Booling Till the Flag is Raised */
    while(!GET_BIT(STK_CTRL, MSTK_CTRL_COUNTFLAG_BIT));
 8000eb2:	bf00      	nop
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MSTK_vBusyWait+0x50>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f9      	beq.n	8000eb4 <MSTK_vBusyWait+0x1c>
    /* Stop the Timer */
    CLR_BIT(STK_CTRL, MSTK_CTRL_ENABLE_BIT);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MSTK_vBusyWait+0x50>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <MSTK_vBusyWait+0x50>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]
    STK_LOAD = 0;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MSTK_vBusyWait+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
    STK_VAL = 0;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MSTK_vBusyWait+0x54>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e014 	.word	0xe000e014
 8000ee8:	e000e010 	.word	0xe000e010
 8000eec:	e000e018 	.word	0xe000e018

08000ef0 <SysTick_Handler>:
/* Func. Name: SysTick_Handler           */
/* i/p arguments: nothing                */
/* o/p arguments: nothing                */
/* Desc. : This API is SysTick Interrupt */
/*****************************************/
void SysTick_Handler() {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
    if (Global_u8CallMode == MSTK_SINGLE_CALL_MODE) {
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SysTick_Handler+0x48>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d111      	bne.n	8000f20 <SysTick_Handler+0x30>
        /* Disable INT */
        CLR_BIT(STK_CTRL,MSTK_CTRL_TICKINT_BIT);
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <SysTick_Handler+0x4c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <SysTick_Handler+0x4c>)
 8000f02:	f023 0302 	bic.w	r3, r3, #2
 8000f06:	6013      	str	r3, [r2, #0]
        /* Stop the Timer */
        CLR_BIT(STK_CTRL,MSTK_CTRL_ENABLE_BIT);
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <SysTick_Handler+0x4c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <SysTick_Handler+0x4c>)
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
        STK_LOAD = 0;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <SysTick_Handler+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
        STK_VAL = 0;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SysTick_Handler+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    }
    if (MSTK_CallBack != (void*)0) { MSTK_CallBack(); }
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <SysTick_Handler+0x58>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <SysTick_Handler+0x3e>
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <SysTick_Handler+0x58>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4798      	blx	r3
    /* Clear Flag */
    (void)GET_BIT(STK_CTRL,MSTK_CTRL_COUNTFLAG_BIT);
 8000f2e:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <SysTick_Handler+0x4c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000078 	.word	0x20000078
 8000f3c:	e000e010 	.word	0xe000e010
 8000f40:	e000e014 	.word	0xe000e014
 8000f44:	e000e018 	.word	0xe000e018
 8000f48:	20000074 	.word	0x20000074
 8000f4c:	00000000 	.word	0x00000000

08000f50 <MUSART_vInit>:
/* i/p arguemnts: A_ClockInitStruct: Contains the USART Clock Settings */
/* i/p arguemnts: USARTx: USART1, USART2, USART6    				   */
/* o/p arguments: nothing                              				   */
/* Desc. : This API initializes USARTx with Specifications 			   */
/***********************************************************************/
void MUSART_vInit(USART_t* USARTx, MUSART_InitTypeDef* A_InitStruct, MUSART_ClockInitTypeDef* A_ClockInitStruct) {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	/* Set The Baudrate */
	switch (A_InitStruct->Oversampling)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	7a9b      	ldrb	r3, [r3, #10]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <MUSART_vInit+0x1a>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d072      	beq.n	800104e <MUSART_vInit+0xfe>
 8000f68:	e0e1      	b.n	800112e <MUSART_vInit+0x1de>
	{
		case MUSART_OVER_SAMPLING_16: USARTx->BRR = MUSART_BRR_SAMPLING16(__MUSART_PCLK__, A_InitStruct->BaudRate); break;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa74 	bl	800045c <__aeabi_ui2d>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b8f      	ldr	r3, [pc, #572]	; (80011b8 <MUSART_vInit+0x268>)
 8000f7a:	f7ff fae9 	bl	8000550 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	a18b      	add	r1, pc, #556	; (adr r1, 80011b0 <MUSART_vInit+0x260>)
 8000f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f88:	f7ff fc0c 	bl	80007a4 <__aeabi_ddiv>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fcee 	bl	8000974 <__aeabi_d2uiz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a88      	ldr	r2, [pc, #544]	; (80011bc <MUSART_vInit+0x26c>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	095b      	lsrs	r3, r3, #5
 8000fa2:	011c      	lsls	r4, r3, #4
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa57 	bl	800045c <__aeabi_ui2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b81      	ldr	r3, [pc, #516]	; (80011b8 <MUSART_vInit+0x268>)
 8000fb4:	f7ff facc 	bl	8000550 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	a17c      	add	r1, pc, #496	; (adr r1, 80011b0 <MUSART_vInit+0x260>)
 8000fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fc2:	f7ff fbef 	bl	80007a4 <__aeabi_ddiv>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fcd1 	bl	8000974 <__aeabi_d2uiz>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4b79      	ldr	r3, [pc, #484]	; (80011bc <MUSART_vInit+0x26c>)
 8000fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2164      	movs	r1, #100	; 0x64
 8000fde:	fb01 f303 	mul.w	r3, r1, r3
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	3332      	adds	r3, #50	; 0x32
 8000fe8:	4a74      	ldr	r2, [pc, #464]	; (80011bc <MUSART_vInit+0x26c>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff4:	441c      	add	r4, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa2e 	bl	800045c <__aeabi_ui2d>
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b6c      	ldr	r3, [pc, #432]	; (80011b8 <MUSART_vInit+0x268>)
 8001006:	f7ff faa3 	bl	8000550 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	a168      	add	r1, pc, #416	; (adr r1, 80011b0 <MUSART_vInit+0x260>)
 8001010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001014:	f7ff fbc6 	bl	80007a4 <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fca8 	bl	8000974 <__aeabi_d2uiz>
 8001024:	4602      	mov	r2, r0
 8001026:	4b65      	ldr	r3, [pc, #404]	; (80011bc <MUSART_vInit+0x26c>)
 8001028:	fba3 1302 	umull	r1, r3, r3, r2
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	fb01 f303 	mul.w	r3, r1, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	3332      	adds	r3, #50	; 0x32
 800103a:	4a60      	ldr	r2, [pc, #384]	; (80011bc <MUSART_vInit+0x26c>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	095b      	lsrs	r3, r3, #5
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	18e2      	adds	r2, r4, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	e06f      	b.n	800112e <MUSART_vInit+0x1de>
		case MUSART_OVER_SAMPLING_8:  USARTx->BRR = MUSART_BRR_SAMPLING8(__MUSART_PCLK__, A_InitStruct->BaudRate);  break;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa02 	bl	800045c <__aeabi_ui2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	f7ff f8c2 	bl	80001e4 <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	a152      	add	r1, pc, #328	; (adr r1, 80011b0 <MUSART_vInit+0x260>)
 8001066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800106a:	f7ff fb9b 	bl	80007a4 <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fc7d 	bl	8000974 <__aeabi_d2uiz>
 800107a:	4603      	mov	r3, r0
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <MUSART_vInit+0x26c>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	011c      	lsls	r4, r3, #4
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9e6 	bl	800045c <__aeabi_ui2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	f7ff f8a6 	bl	80001e4 <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	a144      	add	r1, pc, #272	; (adr r1, 80011b0 <MUSART_vInit+0x260>)
 800109e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010a2:	f7ff fb7f 	bl	80007a4 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fc61 	bl	8000974 <__aeabi_d2uiz>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b41      	ldr	r3, [pc, #260]	; (80011bc <MUSART_vInit+0x26c>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2164      	movs	r1, #100	; 0x64
 80010be:	fb01 f303 	mul.w	r3, r1, r3
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	3332      	adds	r3, #50	; 0x32
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <MUSART_vInit+0x26c>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80010d6:	441c      	add	r4, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9bd 	bl	800045c <__aeabi_ui2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	f7ff f87d 	bl	80001e4 <__adddf3>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	a130      	add	r1, pc, #192	; (adr r1, 80011b0 <MUSART_vInit+0x260>)
 80010f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010f4:	f7ff fb56 	bl	80007a4 <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fc38 	bl	8000974 <__aeabi_d2uiz>
 8001104:	4602      	mov	r2, r0
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MUSART_vInit+0x26c>)
 8001108:	fba3 1302 	umull	r1, r3, r3, r2
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	2164      	movs	r1, #100	; 0x64
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	3332      	adds	r3, #50	; 0x32
 800111a:	4a28      	ldr	r2, [pc, #160]	; (80011bc <MUSART_vInit+0x26c>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	18e2      	adds	r2, r4, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	bf00      	nop
	}
	/* Set The Control Register */
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	7a9b      	ldrb	r3, [r3, #10]
 8001132:	03da      	lsls	r2, r3, #15
			      (A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	7a5b      	ldrb	r3, [r3, #9]
 8001138:	035b      	lsls	r3, r3, #13
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 800113a:	431a      	orrs	r2, r3
				  (A_InitStruct->DataWidth << MUSART_CR1_M_BIT)            |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	791b      	ldrb	r3, [r3, #4]
 8001140:	031b      	lsls	r3, r3, #12
			      (A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT) |
 8001142:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Enable << MUSART_CR1_PCE_BIT)      |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	799b      	ldrb	r3, [r3, #6]
 8001148:	029b      	lsls	r3, r3, #10
				  (A_InitStruct->DataWidth << MUSART_CR1_M_BIT)            |
 800114a:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Selection << MUSART_CR1_PS_BIT)    ;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	79db      	ldrb	r3, [r3, #7]
 8001150:	025b      	lsls	r3, r3, #9
				  (A_InitStruct->Parity_Enable << MUSART_CR1_PCE_BIT)      |
 8001152:	4313      	orrs	r3, r2
 8001154:	461a      	mov	r2, r3
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	60da      	str	r2, [r3, #12]
	/* Set The Direction of Transferring Data */
	WRITE_BITS(USARTx->CR1, A_InitStruct->TransferDirection, TWO_BITS, MUSART_CR1_RE_BIT);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	7a1b      	ldrb	r3, [r3, #8]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f023 030c 	bic.w	r3, r3, #12
 800116a:	431a      	orrs	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	60da      	str	r2, [r3, #12]
	/* Set The Second Control Register */
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	795b      	ldrb	r3, [r3, #5]
 8001174:	031a      	lsls	r2, r3, #12
					(A_ClockInitStruct->ClockOutput << MUSART_CR2_CLKEN_BIT)       |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	02db      	lsls	r3, r3, #11
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 800117c:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPhase << MUSART_CR2_CPHA_BIT)         |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	025b      	lsls	r3, r3, #9
					(A_ClockInitStruct->ClockOutput << MUSART_CR2_CLKEN_BIT)       |
 8001184:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPolarity << MUSART_CR2_CPOL_BIT)      |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	029b      	lsls	r3, r3, #10
					(A_ClockInitStruct->ClockPhase << MUSART_CR2_CPHA_BIT)         |
 800118c:	431a      	orrs	r2, r3
					(A_ClockInitStruct->LastBitClockPulse << MUSART_CR2_LBCL_BIT)  ;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	78db      	ldrb	r3, [r3, #3]
 8001192:	021b      	lsls	r3, r3, #8
					(A_ClockInitStruct->ClockPolarity << MUSART_CR2_CPOL_BIT)      |
 8001194:	4313      	orrs	r3, r2
 8001196:	461a      	mov	r2, r3
	USARTx->CR2 =   (A_InitStruct->StopBits << MUSART_CR2_STOP_BIT)				   |
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	611a      	str	r2, [r3, #16]
	/* Clear The Status Register */
	USARTx->SR = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	00000000 	.word	0x00000000
 80011b4:	41a7d784 	.word	0x41a7d784
 80011b8:	40100000 	.word	0x40100000
 80011bc:	51eb851f 	.word	0x51eb851f

080011c0 <MUSART_vEnable>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6 */
/* o/p arguments: nothing                        */
/* Desc. : This API Enables USARTx  			 */
/*************************************************/
void MUSART_vEnable(USART_t* USARTx)
{ SET_BIT(USARTx->CR1,MUSART_CR1_UE_BIT); }
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <MUSART_vTransmitByte>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6      */
/* i/p arguemnts: Copy_u8Byte: Byte to be Transmitted */
/* o/p arguments: nothing                             */
/* Desc. : This API Transmit Byte using USARTx 		  */
/******************************************************/
void MUSART_vTransmitByte(USART_t* USARTx, u8 Copy_u8Byte) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	while (GET_BIT(USARTx->SR, MUSART_SR_TXE_BIT) == 0);
 80011ec:	bf00      	nop
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f9      	beq.n	80011ee <MUSART_vTransmitByte+0xe>
	USARTx->DR= Copy_u8Byte;
 80011fa:	78fa      	ldrb	r2, [r7, #3]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
	while (GET_BIT(USARTx->SR, MUSART_SR_TC_BIT) == 0);
 8001200:	bf00      	nop
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <MUSART_vTransmitByte+0x22>
	CLR_BIT(USARTx->SR, MUSART_SR_TC_BIT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <MUSART_vTransmitString>:
/* i/p arguemnts: USARTx: USART1, USART2, USART6          */
/* i/p arguemnts: Copy_u8String: String to be Transmitted */
/* o/p arguments: nothing                                 */
/* Desc. : This API Transmit String using USARTx 		  */
/**********************************************************/
void MUSART_vTransmitString(USART_t* USARTx, u8* Copy_u8String) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	u8 Local_u8Counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8String[Local_u8Counter] != '\0') {
 8001234:	e00a      	b.n	800124c <MUSART_vTransmitString+0x26>
		MUSART_vTransmitByte(USARTx, Copy_u8String[Local_u8Counter]);
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffcd 	bl	80011e0 <MUSART_vTransmitByte>
		Local_u8Counter++;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	3301      	adds	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8String[Local_u8Counter] != '\0') {
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <MUSART_vTransmitString+0x10>
	}
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MUSART_u8ReceiveByteSynchBlocking>:
/* Func. Name: MUSART_u8ReceiveByteSynchBlocking        */
/* i/p arguments: USARTx: USART1, USART2, USART6        */
/* o/p arguments: Recieved Data                         */
/* Desc. : This API Receives With Blocking using USARTx */
/********************************************************/
u8 MUSART_u8ReceiveByteSynchBlocking(USART_t* USARTx, u8* Copy_u8Data) {
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	u32 Local_u32TimeOut = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
	/* Iterate untill recieving is complete, or untill timeout */
	while ((!GET_BIT(USARTx->SR,MUSART_SR_RXNE_BIT)) && (Local_u32TimeOut < MUSART_THRESHOLD_VALUE)) { Local_u32TimeOut++; }
 8001272:	e002      	b.n	800127a <MUSART_u8ReceiveByteSynchBlocking+0x16>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <MUSART_u8ReceiveByteSynchBlocking+0x2a>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <MUSART_u8ReceiveByteSynchBlocking+0x50>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d9f2      	bls.n	8001274 <MUSART_u8ReceiveByteSynchBlocking+0x10>
	/* return 255 if timeout, else return the recieved data */
	if (Local_u32TimeOut == MUSART_THRESHOLD_VALUE) { return 0; }
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <MUSART_u8ReceiveByteSynchBlocking+0x54>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <MUSART_u8ReceiveByteSynchBlocking+0x36>
 8001296:	2300      	movs	r3, #0
 8001298:	e005      	b.n	80012a6 <MUSART_u8ReceiveByteSynchBlocking+0x42>
	else { *Copy_u8Data = USARTx->DR; return 1; }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	0001869f 	.word	0x0001869f
 80012b8:	000186a0 	.word	0x000186a0

080012bc <MUSART_vReceiveStringSynchBlocking>:
/* Func. Name: MUSART_vReceiveStringSynchBlocking       	   */
/* i/p arguments: USARTx: USART1, USART2, USART6      		   */
/* o/p arguments: Copy_u8String: Received String               */
/* Desc. : This API Receives String With Blocking using USARTx */
/***************************************************************/
void MUSART_vReceiveStringSynchBlocking(USART_t* USARTx, u8* Copy_u8String) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	u8 Local_u8Counter = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8DataRecieved = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73bb      	strb	r3, [r7, #14]
	while(MUSART_u8ReceiveByteSynchBlocking(USARTx,&Local_u8DataRecieved))
 80012ce:	e007      	b.n	80012e0 <MUSART_vReceiveStringSynchBlocking+0x24>
	{
		Copy_u8String[Local_u8Counter] = Local_u8DataRecieved;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	7bba      	ldrb	r2, [r7, #14]
 80012d8:	701a      	strb	r2, [r3, #0]
		Local_u8Counter++;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	3301      	adds	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
	while(MUSART_u8ReceiveByteSynchBlocking(USARTx,&Local_u8DataRecieved))
 80012e0:	f107 030e 	add.w	r3, r7, #14
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffbc 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ee      	bne.n	80012d0 <MUSART_vReceiveStringSynchBlocking+0x14>
	}
	Copy_u8String[Local_u8Counter] = '\0';
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MUSART_vRxIntStatus>:
/* i/p arguments: USARTx: USART1, USART2, USART6 	 */
/* i/p arguments: Copy_u8Status: ENABLE, DISABLE 	 */
/* o/p arguments: nothing                        	 */
/* Desc. : This API Set the interrupt flag of USARTx */
/*****************************************************/
void MUSART_vRxIntStatus(USART_t* USARTx, u8 Copy_u8Status) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	switch (Copy_u8Status)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <MUSART_vRxIntStatus+0x24>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10d      	bne.n	8001336 <MUSART_vRxIntStatus+0x32>
	{
		case MUSART_ENABLE:  SET_BIT(USARTx->CR1,MUSART_CR1_RXNEIE_BIT); break;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	e007      	b.n	8001338 <MUSART_vRxIntStatus+0x34>
		case MUSART_DISABLE: CLR_BIT(USARTx->CR1,MUSART_CR1_RXNEIE_BIT); break;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f023 0220 	bic.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	e000      	b.n	8001338 <MUSART_vRxIntStatus+0x34>
		default: break;
 8001336:	bf00      	nop
	}
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <USART1_IRQHandler>:
{ MUSART2_CallBack = ptr; }
void MUSART6_vSetCallBack(void (*ptr)(void))
{ MUSART6_CallBack = ptr; }


void USART1_IRQHandler(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	USART1->SR = 0;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <USART1_IRQHandler+0x14>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <USART1_IRQHandler+0x18>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4798      	blx	r3
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	2000007c 	.word	0x2000007c

08001360 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	USART2->SR = 0;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <USART2_IRQHandler+0x14>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 800136a:	4b03      	ldr	r3, [pc, #12]	; (8001378 <USART2_IRQHandler+0x18>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4798      	blx	r3
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40004400 	.word	0x40004400
 8001378:	20000080 	.word	0x20000080

0800137c <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	USART6->SR = 0;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <USART6_IRQHandler+0x14>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <USART6_IRQHandler+0x18>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4798      	blx	r3
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40011400 	.word	0x40011400
 8001394:	20000084 	.word	0x20000084

08001398 <Private_u8ASCII2Hex>:
#include "MFMI_Interface.h"

u32 Global_u32BaseAddress = 0;

static u8 Private_u8ASCII2Hex(u8 Copy_u8ASCII)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8ASCII >= '0' && Copy_u8ASCII <= '9') { return Copy_u8ASCII - '0'; }
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b2f      	cmp	r3, #47	; 0x2f
 80013a6:	d906      	bls.n	80013b6 <Private_u8ASCII2Hex+0x1e>
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b39      	cmp	r3, #57	; 0x39
 80013ac:	d803      	bhi.n	80013b6 <Private_u8ASCII2Hex+0x1e>
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3b30      	subs	r3, #48	; 0x30
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	e00a      	b.n	80013cc <Private_u8ASCII2Hex+0x34>
	else if (Copy_u8ASCII >= 'A' && Copy_u8ASCII <= 'F') { return Copy_u8ASCII - 55; }
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b40      	cmp	r3, #64	; 0x40
 80013ba:	d906      	bls.n	80013ca <Private_u8ASCII2Hex+0x32>
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b46      	cmp	r3, #70	; 0x46
 80013c0:	d803      	bhi.n	80013ca <Private_u8ASCII2Hex+0x32>
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	3b37      	subs	r3, #55	; 0x37
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	e000      	b.n	80013cc <Private_u8ASCII2Hex+0x34>
	return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SHPR_u32ParseAddress>:

u32 SHPR_u32ParseAddress(u8* Copy_u8Address) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	return ((u32)(Private_u8ASCII2Hex(Copy_u8Address[0]) << 28)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffd7 	bl	8001398 <Private_u8ASCII2Hex>
 80013ea:	4603      	mov	r3, r0
 80013ec:	071b      	lsls	r3, r3, #28
 80013ee:	461c      	mov	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[1]) << 24)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffce 	bl	8001398 <Private_u8ASCII2Hex>
 80013fc:	4603      	mov	r3, r0
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	431c      	orrs	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[2]) << 20)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3302      	adds	r3, #2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ffc5 	bl	8001398 <Private_u8ASCII2Hex>
 800140e:	4603      	mov	r3, r0
 8001410:	051b      	lsls	r3, r3, #20
 8001412:	431c      	orrs	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[3]) << 16)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3303      	adds	r3, #3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ffbc 	bl	8001398 <Private_u8ASCII2Hex>
 8001420:	4603      	mov	r3, r0
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	431c      	orrs	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[4]) << 12)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3304      	adds	r3, #4
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffb3 	bl	8001398 <Private_u8ASCII2Hex>
 8001432:	4603      	mov	r3, r0
 8001434:	031b      	lsls	r3, r3, #12
 8001436:	431c      	orrs	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[5]) << 8)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3305      	adds	r3, #5
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffaa 	bl	8001398 <Private_u8ASCII2Hex>
 8001444:	4603      	mov	r3, r0
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	431c      	orrs	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[6]) << 4)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3306      	adds	r3, #6
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ffa1 	bl	8001398 <Private_u8ASCII2Hex>
 8001456:	4603      	mov	r3, r0
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	431c      	orrs	r4, r3
		  | (u32)(Private_u8ASCII2Hex(Copy_u8Address[7]) << 0));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3307      	adds	r3, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff98 	bl	8001398 <Private_u8ASCII2Hex>
 8001468:	4603      	mov	r3, r0
 800146a:	4323      	orrs	r3, r4
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <SHPR_u8GetRecordLength>:

u8 SHPR_u8GetRecordLength(u8* Copy_u8DataRecord) {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	/* Get the Length of the Record [1][2] */
	return (Private_u8ASCII2Hex(Copy_u8DataRecord[1]) << 4) + Private_u8ASCII2Hex(Copy_u8DataRecord[2]);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff88 	bl	8001398 <Private_u8ASCII2Hex>
 8001488:	4603      	mov	r3, r0
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	b2dc      	uxtb	r4, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3302      	adds	r3, #2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff7f 	bl	8001398 <Private_u8ASCII2Hex>
 800149a:	4603      	mov	r3, r0
 800149c:	4423      	add	r3, r4
 800149e:	b2db      	uxtb	r3, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}

080014a8 <SHPR_vParseHexRecord>:

void SHPR_vParseHexRecord(u8* Copy_u8DataRecord) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	/* If Start Record, Set the Base Address */
	if (Copy_u8DataRecord[8] == '4') {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3308      	adds	r3, #8
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b34      	cmp	r3, #52	; 0x34
 80014b8:	d126      	bne.n	8001508 <SHPR_vParseHexRecord+0x60>
		Global_u32BaseAddress = (u32)( ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[9])  << 28))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3309      	adds	r3, #9
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff69 	bl	8001398 <Private_u8ASCII2Hex>
 80014c6:	4603      	mov	r3, r0
 80014c8:	071b      	lsls	r3, r3, #28
 80014ca:	461c      	mov	r4, r3
									 | ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[10]) << 24))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	330a      	adds	r3, #10
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff60 	bl	8001398 <Private_u8ASCII2Hex>
 80014d8:	4603      	mov	r3, r0
 80014da:	061b      	lsls	r3, r3, #24
 80014dc:	431c      	orrs	r4, r3
									 | ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[11]) << 20))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	330b      	adds	r3, #11
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff57 	bl	8001398 <Private_u8ASCII2Hex>
 80014ea:	4603      	mov	r3, r0
 80014ec:	051b      	lsls	r3, r3, #20
 80014ee:	431c      	orrs	r4, r3
									 | ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[12]) << 16)) );
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	330c      	adds	r3, #12
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff4e 	bl	8001398 <Private_u8ASCII2Hex>
 80014fc:	4603      	mov	r3, r0
 80014fe:	041b      	lsls	r3, r3, #16
		Global_u32BaseAddress = (u32)( ((u32)(Private_u8ASCII2Hex(Copy_u8DataRecord[9])  << 28))
 8001500:	4323      	orrs	r3, r4
 8001502:	4a58      	ldr	r2, [pc, #352]	; (8001664 <SHPR_vParseHexRecord+0x1bc>)
 8001504:	6013      	str	r3, [r2, #0]
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+11])<<12))
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+12])<<8)));
		}
		MFMI_vProgram(Local_u32Addresss, (u16*)Local_u16Data, Local_u8Length/2);
	}
}
 8001506:	e0a9      	b.n	800165c <SHPR_vParseHexRecord+0x1b4>
	else if (Copy_u8DataRecord[8] == '0') {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3308      	adds	r3, #8
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b30      	cmp	r3, #48	; 0x30
 8001510:	f040 80a4 	bne.w	800165c <SHPR_vParseHexRecord+0x1b4>
		u8 Local_u8Length = (Private_u8ASCII2Hex(Copy_u8DataRecord[1]) << 4) + Private_u8ASCII2Hex(Copy_u8DataRecord[2]);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3301      	adds	r3, #1
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff3c 	bl	8001398 <Private_u8ASCII2Hex>
 8001520:	4603      	mov	r3, r0
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	b2dc      	uxtb	r4, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3302      	adds	r3, #2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff33 	bl	8001398 <Private_u8ASCII2Hex>
 8001532:	4603      	mov	r3, r0
 8001534:	4423      	add	r3, r4
 8001536:	75bb      	strb	r3, [r7, #22]
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3303      	adds	r3, #3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff2a 	bl	8001398 <Private_u8ASCII2Hex>
 8001544:	4603      	mov	r3, r0
 8001546:	b29b      	uxth	r3, r3
 8001548:	031b      	lsls	r3, r3, #12
 800154a:	b29c      	uxth	r4, r3
				 	 	 	 	 	 	  | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[4])<< 8))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3304      	adds	r3, #4
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff20 	bl	8001398 <Private_u8ASCII2Hex>
 8001558:	4603      	mov	r3, r0
 800155a:	b29b      	uxth	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 8001560:	4323      	orrs	r3, r4
 8001562:	b29c      	uxth	r4, r3
										  | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[5])<< 4))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3305      	adds	r3, #5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff14 	bl	8001398 <Private_u8ASCII2Hex>
 8001570:	4603      	mov	r3, r0
 8001572:	b29b      	uxth	r3, r3
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	b29b      	uxth	r3, r3
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 8001578:	4323      	orrs	r3, r4
 800157a:	b29c      	uxth	r4, r3
										  | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[6])<< 0)) );
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3306      	adds	r3, #6
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff08 	bl	8001398 <Private_u8ASCII2Hex>
 8001588:	4603      	mov	r3, r0
 800158a:	b29b      	uxth	r3, r3
		u16 Local_u16OffsetAddress = (u16)( ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[3])<<12))
 800158c:	4323      	orrs	r3, r4
 800158e:	82bb      	strh	r3, [r7, #20]
		u32 Local_u32Addresss = Global_u32BaseAddress + (u32)(Local_u16OffsetAddress);
 8001590:	8aba      	ldrh	r2, [r7, #20]
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <SHPR_vParseHexRecord+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
		u8 Local_u8Counter = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
		u16* Local_u16Data = (u16*)malloc(sizeof(u16) * (Local_u8Length / 2));
 800159e:	7dbb      	ldrb	r3, [r7, #22]
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fcc2 	bl	8001f30 <malloc>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
		for (Local_u8Counter = 0; Local_u8Counter < Local_u8Length/2; Local_u8Counter++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	e043      	b.n	800163e <SHPR_vParseHexRecord+0x196>
			Local_u16Data[Local_u8Counter] = (u16)(((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+9])<<4))
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3309      	adds	r3, #9
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fee8 	bl	8001398 <Private_u8ASCII2Hex>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	b29c      	uxth	r4, r3
					 	 	 	 	 	 	     | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+10])<<0))
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	330a      	adds	r3, #10
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fedb 	bl	8001398 <Private_u8ASCII2Hex>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4323      	orrs	r3, r4
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b21c      	sxth	r4, r3
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+11])<<12))
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	330b      	adds	r3, #11
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fecd 	bl	8001398 <Private_u8ASCII2Hex>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29b      	uxth	r3, r3
 8001602:	031b      	lsls	r3, r3, #12
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21b      	sxth	r3, r3
 8001608:	4323      	orrs	r3, r4
 800160a:	b21c      	sxth	r4, r3
												 | ((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+12])<<8)));
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	330c      	adds	r3, #12
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff febd 	bl	8001398 <Private_u8ASCII2Hex>
 800161e:	4603      	mov	r3, r0
 8001620:	b29b      	uxth	r3, r3
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b29b      	uxth	r3, r3
 8001626:	b21b      	sxth	r3, r3
 8001628:	4323      	orrs	r3, r4
 800162a:	b219      	sxth	r1, r3
			Local_u16Data[Local_u8Counter] = (u16)(((u16)(Private_u8ASCII2Hex(Copy_u8DataRecord[(4*Local_u8Counter)+9])<<4))
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	b28a      	uxth	r2, r1
 8001636:	801a      	strh	r2, [r3, #0]
		for (Local_u8Counter = 0; Local_u8Counter < Local_u8Length/2; Local_u8Counter++)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	3301      	adds	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
 800163e:	7dbb      	ldrb	r3, [r7, #22]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	7dfa      	ldrb	r2, [r7, #23]
 8001646:	429a      	cmp	r2, r3
 8001648:	d3b5      	bcc.n	80015b6 <SHPR_vParseHexRecord+0x10e>
		MFMI_vProgram(Local_u32Addresss, (u16*)Local_u16Data, Local_u8Length/2);
 800164a:	7dbb      	ldrb	r3, [r7, #22]
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	6938      	ldr	r0, [r7, #16]
 8001658:	f7ff f9fe 	bl	8000a58 <MFMI_vProgram>
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	20000088 	.word	0x20000088

08001668 <main>:
void BOOT_vFlashRecord(void);			//done
void BOOT_vUpdateFirmwareStatus(void);	//done
void BOOT_vCloseConnection();			//done
/**********************************************************************************************/

int main(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	BOOT_vInit();
 800166c:	f000 f924 	bl	80018b8 <BOOT_vInit>
	if (BOOT_u8Buffer == 'O') { BOOT_vJumpToApplicationCode(); }
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <main+0xbc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b4f      	cmp	r3, #79	; 0x4f
 8001676:	d102      	bne.n	800167e <main+0x16>
 8001678:	f000 f992 	bl	80019a0 <BOOT_vJumpToApplicationCode>
 800167c:	e04e      	b.n	800171c <main+0xb4>
	else if (BOOT_u8Buffer == 'N') {
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <main+0xbc>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b4e      	cmp	r3, #78	; 0x4e
 8001684:	d14a      	bne.n	800171c <main+0xb4>
		BOOT_u32Address = SHPR_u32ParseAddress(BOOT_u8AddressBuffer);
 8001686:	4828      	ldr	r0, [pc, #160]	; (8001728 <main+0xc0>)
 8001688:	f7ff fea6 	bl	80013d8 <SHPR_u32ParseAddress>
 800168c:	4603      	mov	r3, r0
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <main+0xc4>)
 8001690:	6013      	str	r3, [r2, #0]
		BOOT_vEraseSectors();
 8001692:	f000 f96f 	bl	8001974 <BOOT_vEraseSectors>
		while (true) {
    		BOOT_vReceiveDataRecord();
 8001696:	f000 f9a1 	bl	80019dc <BOOT_vReceiveDataRecord>
    		/* Parse and Flash */
    		BOOT_vFlashRecord();
 800169a:	f000 faa3 	bl	8001be4 <BOOT_vFlashRecord>
    		/* Restart the Buffer */
    		BOOT_u8DataRecord[20] = 0; BOOT_u8DataRecord[21] = 0;
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <main+0xc8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	751a      	strb	r2, [r3, #20]
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <main+0xc8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	755a      	strb	r2, [r3, #21]
    		/* Ensure That Connection is Closed */
    		BOOT_vCloseConnection();
 80016aa:	f000 fb8d 	bl	8001dc8 <BOOT_vCloseConnection>
    		/* Increment the Counter */
    		BOOT_u8CounterD0 += 2;
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <main+0xcc>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	3302      	adds	r3, #2
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <main+0xcc>)
 80016b8:	701a      	strb	r2, [r3, #0]
    		if (BOOT_u8CounterD0 >= 58) {
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <main+0xcc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b39      	cmp	r3, #57	; 0x39
 80016c0:	d91b      	bls.n	80016fa <main+0x92>
    			BOOT_u8CounterD0 -= 10; BOOT_u8CounterD1++;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <main+0xcc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3b0a      	subs	r3, #10
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <main+0xcc>)
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <main+0xd0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <main+0xd0>)
 80016d8:	701a      	strb	r2, [r3, #0]
    			if (BOOT_u8CounterD1 >= 58) { BOOT_u8CounterD1 -= 10; BOOT_u8CounterD2++; }
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <main+0xd0>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b39      	cmp	r3, #57	; 0x39
 80016e0:	d90b      	bls.n	80016fa <main+0x92>
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <main+0xd0>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3b0a      	subs	r3, #10
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <main+0xd0>)
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <main+0xd4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <main+0xd4>)
 80016f8:	701a      	strb	r2, [r3, #0]
    		}
    		/* Check if it was the Last Record Received */
    		if (BOOT_u8DataRecord[30] == '1' || BOOT_u8DataRecord[43+(BOOT_u8RecordLength*2)] == '1') {
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <main+0xc8>)
 80016fc:	7f9b      	ldrb	r3, [r3, #30]
 80016fe:	2b31      	cmp	r3, #49	; 0x31
 8001700:	d007      	beq.n	8001712 <main+0xaa>
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <main+0xd8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	332b      	adds	r3, #43	; 0x2b
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <main+0xc8>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	2b31      	cmp	r3, #49	; 0x31
 8001710:	d1c1      	bne.n	8001696 <main+0x2e>
				/* Set the Status of the Firmware to Old
				 * So When Fetching Again, it Does Not Update it
				 */
    			BOOT_vUpdateFirmwareStatus();
 8001712:	f000 fa85 	bl	8001c20 <BOOT_vUpdateFirmwareStatus>
    			BOOT_vJumpToApplicationCode();
 8001716:	f000 f943 	bl	80019a0 <BOOT_vJumpToApplicationCode>
    		BOOT_vReceiveDataRecord();
 800171a:	e7bc      	b.n	8001696 <main+0x2e>
 800171c:	2300      	movs	r3, #0
    		}
    	}
	}
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000010c 	.word	0x2000010c
 8001728:	20000100 	.word	0x20000100
 800172c:	20000108 	.word	0x20000108
 8001730:	2000008c 	.word	0x2000008c
 8001734:	20000004 	.word	0x20000004
 8001738:	20000005 	.word	0x20000005
 800173c:	20000006 	.word	0x20000006
 8001740:	2000010e 	.word	0x2000010e

08001744 <BOOT_vHWReset>:

void BOOT_vHWReset(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_HIGH);
 8001748:	2201      	movs	r2, #1
 800174a:	2100      	movs	r1, #0
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <BOOT_vHWReset+0x38>)
 800174e:	f7ff fa96 	bl	8000c7e <MGPIO_vSetPinValue>
	MSTK_vBusyWait(ESP8266_RESET_DELAY);
 8001752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001756:	f7ff fb9f 	bl	8000e98 <MSTK_vBusyWait>
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_LOW);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <BOOT_vHWReset+0x38>)
 8001760:	f7ff fa8d 	bl	8000c7e <MGPIO_vSetPinValue>
	MSTK_vBusyWait(ESP8266_RESET_DELAY);
 8001764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001768:	f7ff fb96 	bl	8000e98 <MSTK_vBusyWait>
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_HIGH);
 800176c:	2201      	movs	r2, #1
 800176e:	2100      	movs	r1, #0
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <BOOT_vHWReset+0x38>)
 8001772:	f7ff fa84 	bl	8000c7e <MGPIO_vSetPinValue>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40020000 	.word	0x40020000

08001780 <BOOT_vInitESP>:

void BOOT_vInitESP(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	BOOT_vHWReset();
 8001784:	f7ff ffde 	bl	8001744 <BOOT_vHWReset>
	do {
		BOOT_u8ContFlag = 0;
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <BOOT_vInitESP+0x120>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
		BOOT_u8TimeOut = 0;
 800178e:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <BOOT_vInitESP+0x124>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
		MUSART_vTransmitString(ESP8266_USART, (u8*)"ATE0\r\n");
 8001794:	4944      	ldr	r1, [pc, #272]	; (80018a8 <BOOT_vInitESP+0x128>)
 8001796:	4845      	ldr	r0, [pc, #276]	; (80018ac <BOOT_vInitESP+0x12c>)
 8001798:	f7ff fd45 	bl	8001226 <MUSART_vTransmitString>
		/* Read the Buffer */
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 800179c:	e030      	b.n	8001800 <BOOT_vInitESP+0x80>
			MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 800179e:	4944      	ldr	r1, [pc, #272]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <BOOT_vInitESP+0x12c>)
 80017a2:	f7ff fd5f 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
			if (BOOT_u8Buffer == 'O') { 										/* if 'O', Read Next Element */
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b4f      	cmp	r3, #79	; 0x4f
 80017ac:	d10b      	bne.n	80017c6 <BOOT_vInitESP+0x46>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 80017ae:	4940      	ldr	r1, [pc, #256]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017b0:	483e      	ldr	r0, [pc, #248]	; (80018ac <BOOT_vInitESP+0x12c>)
 80017b2:	f7ff fd57 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b4b      	cmp	r3, #75	; 0x4b
 80017bc:	d11a      	bne.n	80017f4 <BOOT_vInitESP+0x74>
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <BOOT_vInitESP+0x120>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e020      	b.n	8001808 <BOOT_vInitESP+0x88>
			} else if (BOOT_u8Buffer == 'R') {									/* if 'R', Read the Next Element */
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b52      	cmp	r3, #82	; 0x52
 80017cc:	d10b      	bne.n	80017e6 <BOOT_vInitESP+0x66>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 80017ce:	4938      	ldr	r1, [pc, #224]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017d0:	4836      	ldr	r0, [pc, #216]	; (80018ac <BOOT_vInitESP+0x12c>)
 80017d2:	f7ff fd47 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 0; break; }		/* 'K' Means '\r\nERROR' --> break */
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b52      	cmp	r3, #82	; 0x52
 80017dc:	d10a      	bne.n	80017f4 <BOOT_vInitESP+0x74>
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <BOOT_vInitESP+0x120>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e010      	b.n	8001808 <BOOT_vInitESP+0x88>
			} else if (BOOT_u8Buffer == 'b') { BOOT_vHWReset(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 80017e6:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <BOOT_vInitESP+0x130>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b62      	cmp	r3, #98	; 0x62
 80017ec:	d102      	bne.n	80017f4 <BOOT_vInitESP+0x74>
 80017ee:	f7ff ffa9 	bl	8001744 <BOOT_vHWReset>
 80017f2:	e009      	b.n	8001808 <BOOT_vInitESP+0x88>
			BOOT_u8TimeOut++;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <BOOT_vInitESP+0x124>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <BOOT_vInitESP+0x124>)
 80017fe:	701a      	strb	r2, [r3, #0]
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <BOOT_vInitESP+0x124>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b0e      	cmp	r3, #14
 8001806:	d9ca      	bls.n	800179e <BOOT_vInitESP+0x1e>
		}
	} while(BOOT_u8ContFlag == 0);
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <BOOT_vInitESP+0x120>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0bb      	beq.n	8001788 <BOOT_vInitESP+0x8>
	/* Set Station Mode */
	do {
		BOOT_u8ContFlag = 0;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <BOOT_vInitESP+0x120>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
		BOOT_u8TimeOut = 0;
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <BOOT_vInitESP+0x124>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
		MUSART_vTransmitString(ESP8266_USART,(u8*)"AT+CWMODE=1\r\n");
 800181c:	4925      	ldr	r1, [pc, #148]	; (80018b4 <BOOT_vInitESP+0x134>)
 800181e:	4823      	ldr	r0, [pc, #140]	; (80018ac <BOOT_vInitESP+0x12c>)
 8001820:	f7ff fd01 	bl	8001226 <MUSART_vTransmitString>
		/* Read the Buffer */
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001824:	e030      	b.n	8001888 <BOOT_vInitESP+0x108>
			MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001826:	4922      	ldr	r1, [pc, #136]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001828:	4820      	ldr	r0, [pc, #128]	; (80018ac <BOOT_vInitESP+0x12c>)
 800182a:	f7ff fd1b 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
			if (BOOT_u8Buffer == 'O') { 										/* if 'O', Read Next Element */
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b4f      	cmp	r3, #79	; 0x4f
 8001834:	d10b      	bne.n	800184e <BOOT_vInitESP+0xce>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001836:	491e      	ldr	r1, [pc, #120]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <BOOT_vInitESP+0x12c>)
 800183a:	f7ff fd13 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b4b      	cmp	r3, #75	; 0x4b
 8001844:	d11a      	bne.n	800187c <BOOT_vInitESP+0xfc>
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <BOOT_vInitESP+0x120>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e020      	b.n	8001890 <BOOT_vInitESP+0x110>
			} else if (BOOT_u8Buffer == 'R') {									/* if 'R', Read the Next Element */
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b52      	cmp	r3, #82	; 0x52
 8001854:	d10b      	bne.n	800186e <BOOT_vInitESP+0xee>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001856:	4916      	ldr	r1, [pc, #88]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001858:	4814      	ldr	r0, [pc, #80]	; (80018ac <BOOT_vInitESP+0x12c>)
 800185a:	f7ff fd03 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 0; break; }		/* 'K' Means '\r\nERROR' --> break */
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b52      	cmp	r3, #82	; 0x52
 8001864:	d10a      	bne.n	800187c <BOOT_vInitESP+0xfc>
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <BOOT_vInitESP+0x120>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e010      	b.n	8001890 <BOOT_vInitESP+0x110>
			} else if (BOOT_u8Buffer == 'b') { BOOT_vHWReset(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <BOOT_vInitESP+0x130>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b62      	cmp	r3, #98	; 0x62
 8001874:	d102      	bne.n	800187c <BOOT_vInitESP+0xfc>
 8001876:	f7ff ff65 	bl	8001744 <BOOT_vHWReset>
 800187a:	e009      	b.n	8001890 <BOOT_vInitESP+0x110>
			BOOT_u8TimeOut++;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <BOOT_vInitESP+0x124>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <BOOT_vInitESP+0x124>)
 8001886:	701a      	strb	r2, [r3, #0]
		while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <BOOT_vInitESP+0x124>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b0e      	cmp	r3, #14
 800188e:	d9ca      	bls.n	8001826 <BOOT_vInitESP+0xa6>
		}
	} while(BOOT_u8ContFlag == 0);
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <BOOT_vInitESP+0x120>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0bb      	beq.n	8001810 <BOOT_vInitESP+0x90>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000010d 	.word	0x2000010d
 80018a4:	2000010f 	.word	0x2000010f
 80018a8:	08002150 	.word	0x08002150
 80018ac:	40011000 	.word	0x40011000
 80018b0:	2000010c 	.word	0x2000010c
 80018b4:	08002158 	.word	0x08002158

080018b8 <BOOT_vInit>:

void BOOT_vInit(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
	/* Initialize System Clock */
	MRCC_vInitSysAndBusClock();
 80018be:	f7ff fa07 	bl	8000cd0 <MRCC_vInitSysAndBusClock>
	/* Enable Wanted Peripherals Clock */
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1, MRCC_AHB1_GPIOAEN);
 80018c2:	2100      	movs	r1, #0
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fa3d 	bl	8000d44 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(MRCC_BUS_AHB1LP, MRCC_AHB1LP_FLITFLPEN);
 80018ca:	210f      	movs	r1, #15
 80018cc:	2004      	movs	r0, #4
 80018ce:	f7ff fa39 	bl	8000d44 <MRCC_vEnablePeriphClock>
	MRCC_vEnablePeriphClock(ESP8266_PERI_CLOCK);
 80018d2:	2104      	movs	r1, #4
 80018d4:	2003      	movs	r0, #3
 80018d6:	f7ff fa35 	bl	8000d44 <MRCC_vEnablePeriphClock>
	/* Initialize Used Pins */
	MGPIO_vSetPinMode(ESP8266_RESET_PIN, MGPIO_MODE_OUTPUT);
 80018da:	2201      	movs	r2, #1
 80018dc:	2100      	movs	r1, #0
 80018de:	4822      	ldr	r0, [pc, #136]	; (8001968 <BOOT_vInit+0xb0>)
 80018e0:	f7ff f926 	bl	8000b30 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputSpeed(ESP8266_RESET_PIN, MGPIO_LOW_SPEED);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	481f      	ldr	r0, [pc, #124]	; (8001968 <BOOT_vInit+0xb0>)
 80018ea:	f7ff f969 	bl	8000bc0 <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinOutputType(ESP8266_RESET_PIN, MGPIO_OUTPUT_TYPE_PP);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	481d      	ldr	r0, [pc, #116]	; (8001968 <BOOT_vInit+0xb0>)
 80018f4:	f7ff f941 	bl	8000b7a <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinValue(ESP8266_RESET_PIN, MGPIO_OUTPUT_HIGH);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2100      	movs	r1, #0
 80018fc:	481a      	ldr	r0, [pc, #104]	; (8001968 <BOOT_vInit+0xb0>)
 80018fe:	f7ff f9be 	bl	8000c7e <MGPIO_vSetPinValue>
	MGPIO_vSetPinMode(ESP8266_USART_TX, MGPIO_MODE_ALTERNATE);
 8001902:	2202      	movs	r2, #2
 8001904:	2109      	movs	r1, #9
 8001906:	4818      	ldr	r0, [pc, #96]	; (8001968 <BOOT_vInit+0xb0>)
 8001908:	f7ff f912 	bl	8000b30 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(ESP8266_USART_RX, MGPIO_MODE_ALTERNATE);
 800190c:	2202      	movs	r2, #2
 800190e:	210a      	movs	r1, #10
 8001910:	4815      	ldr	r0, [pc, #84]	; (8001968 <BOOT_vInit+0xb0>)
 8001912:	f7ff f90d 	bl	8000b30 <MGPIO_vSetPinMode>
	MGPIO_vSetPinAFDirection(ESP8266_USART_TX, ESP8266_USART_TX_AF);
 8001916:	2207      	movs	r2, #7
 8001918:	2109      	movs	r1, #9
 800191a:	4813      	ldr	r0, [pc, #76]	; (8001968 <BOOT_vInit+0xb0>)
 800191c:	f7ff f975 	bl	8000c0a <MGPIO_vSetPinAFDirection>
	MGPIO_vSetPinAFDirection(ESP8266_USART_RX, ESP8266_USART_RX_AF);
 8001920:	2207      	movs	r2, #7
 8001922:	210a      	movs	r1, #10
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <BOOT_vInit+0xb0>)
 8001926:	f7ff f970 	bl	8000c0a <MGPIO_vSetPinAFDirection>
	/* Initialize USART */
	MUSART_InitTypeDef uart = ESP8266_USART_INIT_STRUCTURE;
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <BOOT_vInit+0xb4>)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	MUSART_ClockInitTypeDef uart_clock = {MUSART_DISABLE, 0, 0, 0};
 8001934:	2300      	movs	r3, #0
 8001936:	603b      	str	r3, [r7, #0]
	MUSART_vInit(ESP8266_USART, &uart, &uart_clock);
 8001938:	463a      	mov	r2, r7
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <BOOT_vInit+0xb8>)
 8001940:	f7ff fb06 	bl	8000f50 <MUSART_vInit>
	MUSART_vEnable(ESP8266_USART);
 8001944:	480a      	ldr	r0, [pc, #40]	; (8001970 <BOOT_vInit+0xb8>)
 8001946:	f7ff fc3b 	bl	80011c0 <MUSART_vEnable>
	MUSART_vRxIntStatus(ESP8266_USART, MUSART_DISABLE);
 800194a:	2100      	movs	r1, #0
 800194c:	4808      	ldr	r0, [pc, #32]	; (8001970 <BOOT_vInit+0xb8>)
 800194e:	f7ff fcd9 	bl	8001304 <MUSART_vRxIntStatus>
	/* Initialize Systick for the Busy Flag */
	MSTK_vInit();
 8001952:	f7ff fa85 	bl	8000e60 <MSTK_vInit>
	/* Initialize Flash Driver */
	MFMI_vInit();
 8001956:	f7ff f82d 	bl	80009b4 <MFMI_vInit>
	/* Initialize ESP8266 Settings */
	BOOT_vInitESP();
 800195a:	f7ff ff11 	bl	8001780 <BOOT_vInitESP>
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40020000 	.word	0x40020000
 800196c:	08002168 	.word	0x08002168
 8001970:	40011000 	.word	0x40011000

08001974 <BOOT_vEraseSectors>:
	MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8AddressBuffer[5]);
	MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8AddressBuffer[6]);
	MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8AddressBuffer[7]);
}

void BOOT_vEraseSectors(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	u8 BOOT_u8Counter = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	71fb      	strb	r3, [r7, #7]
	for (; BOOT_u8Counter < _SECTORS_TO_BE_ERASED_+1; BOOT_u8Counter++) { MFMI_vSectorErase(BOOT_u8Counter); }
 800197e:	e006      	b.n	800198e <BOOT_vEraseSectors+0x1a>
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f828 	bl	80009d8 <MFMI_vSectorErase>
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	3301      	adds	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d9f5      	bls.n	8001980 <BOOT_vEraseSectors+0xc>
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <BOOT_vJumpToApplicationCode>:

void BOOT_vJumpToApplicationCode(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
	/* Set the MSP */
	u32 MSP_VALUE = *((volatile u32*)0x08004000);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <BOOT_vJumpToApplicationCode+0x30>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
	__asm volatile("MSR MSP,%0"::"r"(MSP_VALUE));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f383 8808 	msr	MSP, r3
	/* Set the Vector Table */
	*((volatile u32*) 0xE000ED08) = 0x08004000;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <BOOT_vJumpToApplicationCode+0x34>)
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <BOOT_vJumpToApplicationCode+0x30>)
 80019b6:	601a      	str	r2, [r3, #0]
	/* Jump to the Reset Handler of the APPLICATION CODE */
	void (*BOOT_voidJump)(void);									/* Create a Pointer to Function */
	u32 BOOT_ResetHandlerAddress = *((volatile u32*)0x08004004); 	/* Variable of the Address of the Reset Handler */
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <BOOT_vJumpToApplicationCode+0x38>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]
	BOOT_voidJump = (void*)BOOT_ResetHandlerAddress;				/* Point it to the Address of the Reset Handler */
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	607b      	str	r3, [r7, #4]
	BOOT_voidJump();												/* Jump to the Reset Handler */
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4798      	blx	r3
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	08004000 	.word	0x08004000
 80019d4:	e000ed08 	.word	0xe000ed08
 80019d8:	08004004 	.word	0x08004004

080019dc <BOOT_vReceiveDataRecord>:

void BOOT_vReceiveDataRecord(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	do {
		/* Connect using TCP Protocol */
		do {
			BOOT_u8ContFlag = 0;
 80019e0:	4b72      	ldr	r3, [pc, #456]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(ESP8266_USART,(u8*)CIPSTART);
 80019ec:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <BOOT_vReceiveDataRecord+0x1d8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4871      	ldr	r0, [pc, #452]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 80019f4:	f7ff fc17 	bl	8001226 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 80019f8:	e038      	b.n	8001a6c <BOOT_vReceiveDataRecord+0x90>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 80019fa:	4970      	ldr	r1, [pc, #448]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 80019fc:	486e      	ldr	r0, [pc, #440]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 80019fe:	f7ff fc31 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }				/* 'b' Means 'busy' --> Reset the Module */
 8001a02:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b62      	cmp	r3, #98	; 0x62
 8001a08:	d102      	bne.n	8001a10 <BOOT_vReceiveDataRecord+0x34>
 8001a0a:	f7ff feb9 	bl	8001780 <BOOT_vInitESP>
 8001a0e:	e031      	b.n	8001a74 <BOOT_vReceiveDataRecord+0x98>
				else if (BOOT_u8Buffer == 'O') {									/* if 'O', Read Next Element */
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b4f      	cmp	r3, #79	; 0x4f
 8001a16:	d113      	bne.n	8001a40 <BOOT_vReceiveDataRecord+0x64>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001a18:	4968      	ldr	r1, [pc, #416]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a1a:	4867      	ldr	r0, [pc, #412]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a1c:	f7ff fc22 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means 'CONNECT\r\nOK' --> break */
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b4b      	cmp	r3, #75	; 0x4b
 8001a26:	d103      	bne.n	8001a30 <BOOT_vReceiveDataRecord+0x54>
 8001a28:	4b60      	ldr	r3, [pc, #384]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e021      	b.n	8001a74 <BOOT_vReceiveDataRecord+0x98>
					else if (BOOT_u8Buffer == 'R') {BOOT_u8ContFlag = 0; break; }	/* 'R' Means 'ERROR' --> Connect Again */
 8001a30:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b52      	cmp	r3, #82	; 0x52
 8001a36:	d113      	bne.n	8001a60 <BOOT_vReceiveDataRecord+0x84>
 8001a38:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e019      	b.n	8001a74 <BOOT_vReceiveDataRecord+0x98>
				} else if (BOOT_u8Buffer == 'Y') {									/* if 'Y', Read Next Element */
 8001a40:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b59      	cmp	r3, #89	; 0x59
 8001a46:	d10b      	bne.n	8001a60 <BOOT_vReceiveDataRecord+0x84>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001a48:	495c      	ldr	r1, [pc, #368]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a4a:	485b      	ldr	r0, [pc, #364]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a4c:	f7ff fc0a 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == ' ') { BOOT_u8ContFlag = 1; break; }		/* ' ' Means 'ALREADY CONNECTED' --> break */
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d103      	bne.n	8001a60 <BOOT_vReceiveDataRecord+0x84>
 8001a58:	4b54      	ldr	r3, [pc, #336]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e009      	b.n	8001a74 <BOOT_vReceiveDataRecord+0x98>
				}
				BOOT_u8TimeOut++;
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001a6a:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b0e      	cmp	r3, #14
 8001a72:	d9c2      	bls.n	80019fa <BOOT_vReceiveDataRecord+0x1e>
			}
		} while(BOOT_u8ContFlag == 0);
 8001a74:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0b1      	beq.n	80019e0 <BOOT_vReceiveDataRecord+0x4>
		/* TCP is now Connected, Send Data Length
		 * AT+CIPSEND=<DataLength>
		 * BOOT_u8ContFlag = 2 --> Skip Data Get URL Command
		 */
		do {
			BOOT_u8ContFlag = 0;
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
			if (BOOT_u8CounterD2 != '0')      { MUSART_vTransmitString(ESP8266_USART,(u8*)"AT+CIPSEND=52\r\n"); }
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <BOOT_vReceiveDataRecord+0x1e4>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b30      	cmp	r3, #48	; 0x30
 8001a8e:	d004      	beq.n	8001a9a <BOOT_vReceiveDataRecord+0xbe>
 8001a90:	494c      	ldr	r1, [pc, #304]	; (8001bc4 <BOOT_vReceiveDataRecord+0x1e8>)
 8001a92:	4849      	ldr	r0, [pc, #292]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001a94:	f7ff fbc7 	bl	8001226 <MUSART_vTransmitString>
 8001a98:	e036      	b.n	8001b08 <BOOT_vReceiveDataRecord+0x12c>
			else if (BOOT_u8CounterD1 != '0') { MUSART_vTransmitString(ESP8266_USART,(u8*)"AT+CIPSEND=51\r\n"); }
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <BOOT_vReceiveDataRecord+0x1ec>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b30      	cmp	r3, #48	; 0x30
 8001aa0:	d004      	beq.n	8001aac <BOOT_vReceiveDataRecord+0xd0>
 8001aa2:	494a      	ldr	r1, [pc, #296]	; (8001bcc <BOOT_vReceiveDataRecord+0x1f0>)
 8001aa4:	4844      	ldr	r0, [pc, #272]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001aa6:	f7ff fbbe 	bl	8001226 <MUSART_vTransmitString>
 8001aaa:	e02d      	b.n	8001b08 <BOOT_vReceiveDataRecord+0x12c>
			else 							  { MUSART_vTransmitString(ESP8266_USART,(u8*)"AT+CIPSEND=50\r\n"); }
 8001aac:	4948      	ldr	r1, [pc, #288]	; (8001bd0 <BOOT_vReceiveDataRecord+0x1f4>)
 8001aae:	4842      	ldr	r0, [pc, #264]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001ab0:	f7ff fbb9 	bl	8001226 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001ab4:	e028      	b.n	8001b08 <BOOT_vReceiveDataRecord+0x12c>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001ab6:	4941      	ldr	r1, [pc, #260]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001ab8:	483f      	ldr	r0, [pc, #252]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001aba:	f7ff fbd3 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'v') { BOOT_u8ContFlag = 2; break; }		/* 'v' Means 'link is not valid' --> Connect Again */
 8001abe:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b76      	cmp	r3, #118	; 0x76
 8001ac4:	d103      	bne.n	8001ace <BOOT_vReceiveDataRecord+0xf2>
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e020      	b.n	8001b10 <BOOT_vReceiveDataRecord+0x134>
				else if (BOOT_u8Buffer == 'O') {								/* if 'O', Read Next Element */
 8001ace:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b4f      	cmp	r3, #79	; 0x4f
 8001ad4:	d10b      	bne.n	8001aee <BOOT_vReceiveDataRecord+0x112>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001ad6:	4939      	ldr	r1, [pc, #228]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001ad8:	4837      	ldr	r0, [pc, #220]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001ada:	f7ff fbc3 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }	/* 'K' Means '\r\nOK' --> break */
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b4b      	cmp	r3, #75	; 0x4b
 8001ae4:	d10a      	bne.n	8001afc <BOOT_vReceiveDataRecord+0x120>
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e010      	b.n	8001b10 <BOOT_vReceiveDataRecord+0x134>
				} else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }	/* 'b' Means 'busy' --> Reset the Module */
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <BOOT_vReceiveDataRecord+0x1e0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b62      	cmp	r3, #98	; 0x62
 8001af4:	d102      	bne.n	8001afc <BOOT_vReceiveDataRecord+0x120>
 8001af6:	f7ff fe43 	bl	8001780 <BOOT_vInitESP>
 8001afa:	e009      	b.n	8001b10 <BOOT_vReceiveDataRecord+0x134>
				BOOT_u8TimeOut++;
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001b06:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <BOOT_vReceiveDataRecord+0x1d4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b0e      	cmp	r3, #14
 8001b0e:	d9d2      	bls.n	8001ab6 <BOOT_vReceiveDataRecord+0xda>
			}
		} while (BOOT_u8ContFlag == 0);
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0b1      	beq.n	8001a7c <BOOT_vReceiveDataRecord+0xa0>
		/* Get the Data Record from the Website */
		if (BOOT_u8ContFlag != 2) {
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <BOOT_vReceiveDataRecord+0x1d0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d039      	beq.n	8001b94 <BOOT_vReceiveDataRecord+0x1b8>
			MUSART_vTransmitString(ESP8266_USART,(u8*)"GET http://sobhhhh.freevar.com/script.php?line=");
 8001b20:	492c      	ldr	r1, [pc, #176]	; (8001bd4 <BOOT_vReceiveDataRecord+0x1f8>)
 8001b22:	4825      	ldr	r0, [pc, #148]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b24:	f7ff fb7f 	bl	8001226 <MUSART_vTransmitString>
		    if (BOOT_u8CounterD2 != '0') {
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <BOOT_vReceiveDataRecord+0x1e4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b30      	cmp	r3, #48	; 0x30
 8001b2e:	d012      	beq.n	8001b56 <BOOT_vReceiveDataRecord+0x17a>
		    	/* If Not '0' --> Hundreds */
		    	MUSART_vTransmitByte(ESP8266_USART, BOOT_u8CounterD2);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <BOOT_vReceiveDataRecord+0x1e4>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b38:	f7ff fb52 	bl	80011e0 <MUSART_vTransmitByte>
		        MUSART_vTransmitByte(ESP8266_USART, BOOT_u8CounterD1);
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <BOOT_vReceiveDataRecord+0x1ec>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	481d      	ldr	r0, [pc, #116]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b44:	f7ff fb4c 	bl	80011e0 <MUSART_vTransmitByte>
		        MUSART_vTransmitByte(ESP8266_USART, BOOT_u8CounterD0);
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <BOOT_vReceiveDataRecord+0x1fc>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b50:	f7ff fb46 	bl	80011e0 <MUSART_vTransmitByte>
 8001b54:	e016      	b.n	8001b84 <BOOT_vReceiveDataRecord+0x1a8>
		    } else if (BOOT_u8CounterD1 != '0') {
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <BOOT_vReceiveDataRecord+0x1ec>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b30      	cmp	r3, #48	; 0x30
 8001b5c:	d00c      	beq.n	8001b78 <BOOT_vReceiveDataRecord+0x19c>
		    	/* If Not '0' --> Tens */
		    	MUSART_vTransmitByte(ESP8266_USART, BOOT_u8CounterD1);
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <BOOT_vReceiveDataRecord+0x1ec>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b66:	f7ff fb3b 	bl	80011e0 <MUSART_vTransmitByte>
		        MUSART_vTransmitByte(ESP8266_USART, BOOT_u8CounterD0);
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <BOOT_vReceiveDataRecord+0x1fc>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b72:	f7ff fb35 	bl	80011e0 <MUSART_vTransmitByte>
 8001b76:	e005      	b.n	8001b84 <BOOT_vReceiveDataRecord+0x1a8>
		    } else {
		    	/* If Both '0' --> Ones */
		    	MUSART_vTransmitByte(ESP8266_USART, BOOT_u8CounterD0);
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <BOOT_vReceiveDataRecord+0x1fc>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b80:	f7ff fb2e 	bl	80011e0 <MUSART_vTransmitByte>
		    }
		    MUSART_vTransmitString(ESP8266_USART,(u8*)"\r\n");
 8001b84:	4915      	ldr	r1, [pc, #84]	; (8001bdc <BOOT_vReceiveDataRecord+0x200>)
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b88:	f7ff fb4d 	bl	8001226 <MUSART_vTransmitString>
		    /* Receive the Data Record */
		    MUSART_vReceiveStringSynchBlocking(ESP8266_USART, BOOT_u8DataRecord);
 8001b8c:	4914      	ldr	r1, [pc, #80]	; (8001be0 <BOOT_vReceiveDataRecord+0x204>)
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <BOOT_vReceiveDataRecord+0x1dc>)
 8001b90:	f7ff fb94 	bl	80012bc <MUSART_vReceiveStringSynchBlocking>
		}
	} while (BOOT_u8DataRecord[21] != ':' && BOOT_u8DataRecord[22] != ':');
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <BOOT_vReceiveDataRecord+0x204>)
 8001b96:	7d5b      	ldrb	r3, [r3, #21]
 8001b98:	2b3a      	cmp	r3, #58	; 0x3a
 8001b9a:	d004      	beq.n	8001ba6 <BOOT_vReceiveDataRecord+0x1ca>
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <BOOT_vReceiveDataRecord+0x204>)
 8001b9e:	7d9b      	ldrb	r3, [r3, #22]
 8001ba0:	2b3a      	cmp	r3, #58	; 0x3a
 8001ba2:	f47f af1d 	bne.w	80019e0 <BOOT_vReceiveDataRecord+0x4>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000010d 	.word	0x2000010d
 8001bb0:	2000010f 	.word	0x2000010f
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	2000010c 	.word	0x2000010c
 8001bc0:	20000006 	.word	0x20000006
 8001bc4:	080021b8 	.word	0x080021b8
 8001bc8:	20000005 	.word	0x20000005
 8001bcc:	080021c8 	.word	0x080021c8
 8001bd0:	080021d8 	.word	0x080021d8
 8001bd4:	080021e8 	.word	0x080021e8
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	08002218 	.word	0x08002218
 8001be0:	2000008c 	.word	0x2000008c

08001be4 <BOOT_vFlashRecord>:

void BOOT_vFlashRecord(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	SHPR_vParseHexRecord(&BOOT_u8DataRecord[22]);
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <BOOT_vFlashRecord+0x30>)
 8001bea:	f7ff fc5d 	bl	80014a8 <SHPR_vParseHexRecord>
	BOOT_u8RecordLength = SHPR_u8GetRecordLength(&BOOT_u8DataRecord[22]);
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <BOOT_vFlashRecord+0x30>)
 8001bf0:	f7ff fc40 	bl	8001474 <SHPR_u8GetRecordLength>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <BOOT_vFlashRecord+0x34>)
 8001bfa:	701a      	strb	r2, [r3, #0]
	SHPR_vParseHexRecord(&BOOT_u8DataRecord[35+(BOOT_u8RecordLength*2)]);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <BOOT_vFlashRecord+0x34>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	3323      	adds	r3, #35	; 0x23
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <BOOT_vFlashRecord+0x38>)
 8001c06:	4413      	add	r3, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc4d 	bl	80014a8 <SHPR_vParseHexRecord>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200000a2 	.word	0x200000a2
 8001c18:	2000010e 	.word	0x2000010e
 8001c1c:	2000008c 	.word	0x2000008c

08001c20 <BOOT_vUpdateFirmwareStatus>:

void BOOT_vUpdateFirmwareStatus(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	do {
		/* Connect using TCP Protocol */
		do {
			BOOT_u8ContFlag = 0;
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(ESP8266_USART,(u8*)CIPSTART);
 8001c30:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <BOOT_vUpdateFirmwareStatus+0x194>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4860      	ldr	r0, [pc, #384]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001c38:	f7ff faf5 	bl	8001226 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001c3c:	e030      	b.n	8001ca0 <BOOT_vUpdateFirmwareStatus+0x80>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001c3e:	495f      	ldr	r1, [pc, #380]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c40:	485d      	ldr	r0, [pc, #372]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001c42:	f7ff fb0f 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }			/* 'b' Means 'busy' --> Reset the Module */
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b62      	cmp	r3, #98	; 0x62
 8001c4c:	d102      	bne.n	8001c54 <BOOT_vUpdateFirmwareStatus+0x34>
 8001c4e:	f7ff fd97 	bl	8001780 <BOOT_vInitESP>
 8001c52:	e029      	b.n	8001ca8 <BOOT_vUpdateFirmwareStatus+0x88>
				else if (BOOT_u8Buffer == 'O') {								/* if 'O', Read Next Element */
 8001c54:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b4f      	cmp	r3, #79	; 0x4f
 8001c5a:	d10b      	bne.n	8001c74 <BOOT_vUpdateFirmwareStatus+0x54>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001c5c:	4957      	ldr	r1, [pc, #348]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c5e:	4856      	ldr	r0, [pc, #344]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001c60:	f7ff fb00 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }	/* 'K' Means 'CONNECT\r\nOK' --> break */
 8001c64:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b4b      	cmp	r3, #75	; 0x4b
 8001c6a:	d113      	bne.n	8001c94 <BOOT_vUpdateFirmwareStatus+0x74>
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e019      	b.n	8001ca8 <BOOT_vUpdateFirmwareStatus+0x88>
				} else if (BOOT_u8Buffer == 'Y') {								/* if 'Y', Read Next Element */
 8001c74:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b59      	cmp	r3, #89	; 0x59
 8001c7a:	d10b      	bne.n	8001c94 <BOOT_vUpdateFirmwareStatus+0x74>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001c7c:	494f      	ldr	r1, [pc, #316]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c7e:	484e      	ldr	r0, [pc, #312]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001c80:	f7ff faf0 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == ' ') { BOOT_u8ContFlag = 1; break; }	/* ' ' Means 'ALREADY CONNECTED' --> break */
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d103      	bne.n	8001c94 <BOOT_vUpdateFirmwareStatus+0x74>
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e009      	b.n	8001ca8 <BOOT_vUpdateFirmwareStatus+0x88>
				}
				BOOT_u8TimeOut++;
 8001c94:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001c9e:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b0e      	cmp	r3, #14
 8001ca6:	d9ca      	bls.n	8001c3e <BOOT_vUpdateFirmwareStatus+0x1e>
			}
		} while(BOOT_u8ContFlag == 0);
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0b9      	beq.n	8001c24 <BOOT_vUpdateFirmwareStatus+0x4>
		/* TCP is now Connected, Send Data Length
		 * AT+CIPSEND=<DataLength>
		 * BOOT_u8ContFlag = 2 --> Skip Data Get URL Command
		 */
		do {
			BOOT_u8ContFlag = 0;
 8001cb0:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(ESP8266_USART,(u8*)"AT+CIPSEND=49\r\n");
 8001cbc:	4940      	ldr	r1, [pc, #256]	; (8001dc0 <BOOT_vUpdateFirmwareStatus+0x1a0>)
 8001cbe:	483e      	ldr	r0, [pc, #248]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001cc0:	f7ff fab1 	bl	8001226 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001cc4:	e028      	b.n	8001d18 <BOOT_vUpdateFirmwareStatus+0xf8>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001cc6:	493d      	ldr	r1, [pc, #244]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001cc8:	483b      	ldr	r0, [pc, #236]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001cca:	f7ff facb 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'v') { BOOT_u8ContFlag = 2; break; }			/* 'v' Means 'link is not valid' --> Connect Again */
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b76      	cmp	r3, #118	; 0x76
 8001cd4:	d103      	bne.n	8001cde <BOOT_vUpdateFirmwareStatus+0xbe>
 8001cd6:	4b35      	ldr	r3, [pc, #212]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e020      	b.n	8001d20 <BOOT_vUpdateFirmwareStatus+0x100>
				else if (BOOT_u8Buffer == 'O') {									/* if 'O', Read Next Element */
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b4f      	cmp	r3, #79	; 0x4f
 8001ce4:	d10b      	bne.n	8001cfe <BOOT_vUpdateFirmwareStatus+0xde>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001ce6:	4935      	ldr	r1, [pc, #212]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001ce8:	4833      	ldr	r0, [pc, #204]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001cea:	f7ff fabb 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b4b      	cmp	r3, #75	; 0x4b
 8001cf4:	d10a      	bne.n	8001d0c <BOOT_vUpdateFirmwareStatus+0xec>
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	e010      	b.n	8001d20 <BOOT_vUpdateFirmwareStatus+0x100>
				}  else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b62      	cmp	r3, #98	; 0x62
 8001d04:	d102      	bne.n	8001d0c <BOOT_vUpdateFirmwareStatus+0xec>
 8001d06:	f7ff fd3b 	bl	8001780 <BOOT_vInitESP>
 8001d0a:	e009      	b.n	8001d20 <BOOT_vUpdateFirmwareStatus+0x100>
				BOOT_u8TimeOut++;
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d16:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b0e      	cmp	r3, #14
 8001d1e:	d9d2      	bls.n	8001cc6 <BOOT_vUpdateFirmwareStatus+0xa6>
			}
		} while (BOOT_u8ContFlag == 0);
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0c3      	beq.n	8001cb0 <BOOT_vUpdateFirmwareStatus+0x90>
		/* Length is now Sent, Start Sending Data */
		if (BOOT_u8ContFlag != 2) {
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d02f      	beq.n	8001d90 <BOOT_vUpdateFirmwareStatus+0x170>
			BOOT_u8ContFlag = 0;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
			BOOT_u8TimeOut = 0;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
			MUSART_vTransmitString(ESP8266_USART,(u8*)"GET http://sobhhhh.freevar.com/script.php?end\r\n");
 8001d3c:	4921      	ldr	r1, [pc, #132]	; (8001dc4 <BOOT_vUpdateFirmwareStatus+0x1a4>)
 8001d3e:	481e      	ldr	r0, [pc, #120]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001d40:	f7ff fa71 	bl	8001226 <MUSART_vTransmitString>
			/* Read the Buffer */
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001d44:	e020      	b.n	8001d88 <BOOT_vUpdateFirmwareStatus+0x168>
				MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001d46:	491d      	ldr	r1, [pc, #116]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001d48:	481b      	ldr	r0, [pc, #108]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001d4a:	f7ff fa8b 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
				if (BOOT_u8Buffer == 'O') {											/* if 'O', Read Next Element */
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b4f      	cmp	r3, #79	; 0x4f
 8001d54:	d10b      	bne.n	8001d6e <BOOT_vUpdateFirmwareStatus+0x14e>
					MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001d56:	4919      	ldr	r1, [pc, #100]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001d58:	4817      	ldr	r0, [pc, #92]	; (8001db8 <BOOT_vUpdateFirmwareStatus+0x198>)
 8001d5a:	f7ff fa83 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
					if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }		/* 'K' Means '\r\nOK' --> break */
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b4b      	cmp	r3, #75	; 0x4b
 8001d64:	d10a      	bne.n	8001d7c <BOOT_vUpdateFirmwareStatus+0x15c>
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e010      	b.n	8001d90 <BOOT_vUpdateFirmwareStatus+0x170>
				}  else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }		/* 'b' Means 'busy' --> Reset the Module */
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <BOOT_vUpdateFirmwareStatus+0x19c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b62      	cmp	r3, #98	; 0x62
 8001d74:	d102      	bne.n	8001d7c <BOOT_vUpdateFirmwareStatus+0x15c>
 8001d76:	f7ff fd03 	bl	8001780 <BOOT_vInitESP>
 8001d7a:	e009      	b.n	8001d90 <BOOT_vUpdateFirmwareStatus+0x170>
				BOOT_u8TimeOut++;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d86:	701a      	strb	r2, [r3, #0]
			while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <BOOT_vUpdateFirmwareStatus+0x190>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b0e      	cmp	r3, #14
 8001d8e:	d9da      	bls.n	8001d46 <BOOT_vUpdateFirmwareStatus+0x126>
			}
		}
	} while (BOOT_u8ContFlag == 0 || BOOT_u8ContFlag == 2);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f af45 	beq.w	8001c24 <BOOT_vUpdateFirmwareStatus+0x4>
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <BOOT_vUpdateFirmwareStatus+0x18c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	f43f af40 	beq.w	8001c24 <BOOT_vUpdateFirmwareStatus+0x4>
	BOOT_vCloseConnection();
 8001da4:	f000 f810 	bl	8001dc8 <BOOT_vCloseConnection>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000010d 	.word	0x2000010d
 8001db0:	2000010f 	.word	0x2000010f
 8001db4:	20000000 	.word	0x20000000
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	2000010c 	.word	0x2000010c
 8001dc0:	08002174 	.word	0x08002174
 8001dc4:	0800221c 	.word	0x0800221c

08001dc8 <BOOT_vCloseConnection>:

void BOOT_vCloseConnection(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	do {
		BOOT_u8ContFlag = 0;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <BOOT_vCloseConnection+0x94>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
		BOOT_u8TimeOut = 0;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <BOOT_vCloseConnection+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
		MUSART_vTransmitString(ESP8266_USART, (u8*)"AT+CIPCLOSE\r\n");
 8001dd8:	4922      	ldr	r1, [pc, #136]	; (8001e64 <BOOT_vCloseConnection+0x9c>)
 8001dda:	4823      	ldr	r0, [pc, #140]	; (8001e68 <BOOT_vCloseConnection+0xa0>)
 8001ddc:	f7ff fa23 	bl	8001226 <MUSART_vTransmitString>
	    /* Read Buffer */
	    while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001de0:	e030      	b.n	8001e44 <BOOT_vCloseConnection+0x7c>
	    	MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001de2:	4922      	ldr	r1, [pc, #136]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001de4:	4820      	ldr	r0, [pc, #128]	; (8001e68 <BOOT_vCloseConnection+0xa0>)
 8001de6:	f7ff fa3d 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
	    	if (BOOT_u8Buffer == 'O') {												/* if 'O', Read Next Element */
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b4f      	cmp	r3, #79	; 0x4f
 8001df0:	d10b      	bne.n	8001e0a <BOOT_vCloseConnection+0x42>
	    		MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001df2:	491e      	ldr	r1, [pc, #120]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001df4:	481c      	ldr	r0, [pc, #112]	; (8001e68 <BOOT_vCloseConnection+0xa0>)
 8001df6:	f7ff fa35 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
	    		if (BOOT_u8Buffer == 'K') { BOOT_u8ContFlag = 1; break; }			/* 'K' Means '\r\nOK' --> break */
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b4b      	cmp	r3, #75	; 0x4b
 8001e00:	d11a      	bne.n	8001e38 <BOOT_vCloseConnection+0x70>
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <BOOT_vCloseConnection+0x94>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e020      	b.n	8001e4c <BOOT_vCloseConnection+0x84>
	    	} else if (BOOT_u8Buffer == 'E') {										/* if 'E', Read Next Element */
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b45      	cmp	r3, #69	; 0x45
 8001e10:	d10b      	bne.n	8001e2a <BOOT_vCloseConnection+0x62>
	    		MUSART_u8ReceiveByteSynchBlocking(ESP8266_USART, &BOOT_u8Buffer);
 8001e12:	4916      	ldr	r1, [pc, #88]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001e14:	4814      	ldr	r0, [pc, #80]	; (8001e68 <BOOT_vCloseConnection+0xa0>)
 8001e16:	f7ff fa25 	bl	8001264 <MUSART_u8ReceiveByteSynchBlocking>
	    		if (BOOT_u8Buffer == 'R') { BOOT_u8ContFlag = 1; break; }			/* 'R' Means '\r\nERROR' --> break */
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b52      	cmp	r3, #82	; 0x52
 8001e20:	d10a      	bne.n	8001e38 <BOOT_vCloseConnection+0x70>
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <BOOT_vCloseConnection+0x94>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e010      	b.n	8001e4c <BOOT_vCloseConnection+0x84>
	    	} else if (BOOT_u8Buffer == 'b') { BOOT_vInitESP(); break; }			/* 'b' Means 'busy' --> Reset the Module */
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <BOOT_vCloseConnection+0xa4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b62      	cmp	r3, #98	; 0x62
 8001e30:	d102      	bne.n	8001e38 <BOOT_vCloseConnection+0x70>
 8001e32:	f7ff fca5 	bl	8001780 <BOOT_vInitESP>
 8001e36:	e009      	b.n	8001e4c <BOOT_vCloseConnection+0x84>
	    	BOOT_u8TimeOut++;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <BOOT_vCloseConnection+0x98>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <BOOT_vCloseConnection+0x98>)
 8001e42:	701a      	strb	r2, [r3, #0]
	    while (BOOT_u8TimeOut < BOOT_THRESHOLD_VALUE) {
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <BOOT_vCloseConnection+0x98>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b0e      	cmp	r3, #14
 8001e4a:	d9ca      	bls.n	8001de2 <BOOT_vCloseConnection+0x1a>
	    }
	} while (BOOT_u8ContFlag == 0);
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <BOOT_vCloseConnection+0x94>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0bb      	beq.n	8001dcc <BOOT_vCloseConnection+0x4>
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000010d 	.word	0x2000010d
 8001e60:	2000010f 	.word	0x2000010f
 8001e64:	0800224c 	.word	0x0800224c
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	2000010c 	.word	0x2000010c

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f000 f90a 	bl	80020b8 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20010000 	.word	0x20010000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	20000110 	.word	0x20000110
 8001ed8:	20000260 	.word	0x20000260

08001edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ede:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <LoopForever+0xe>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	; (8001f28 <LoopForever+0x16>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f0a:	f000 f8db 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f0e:	f7ff fbab 	bl	8001668 <main>

08001f12 <LoopForever>:

LoopForever:
  b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   r0, =_estack
 8001f14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001f20:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 8001f24:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001f28:	2000025c 	.word	0x2000025c

08001f2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <malloc>:
 8001f30:	4b02      	ldr	r3, [pc, #8]	; (8001f3c <malloc+0xc>)
 8001f32:	4601      	mov	r1, r0
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	f000 b823 	b.w	8001f80 <_malloc_r>
 8001f3a:	bf00      	nop
 8001f3c:	20000054 	.word	0x20000054

08001f40 <sbrk_aligned>:
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	4e0e      	ldr	r6, [pc, #56]	; (8001f7c <sbrk_aligned+0x3c>)
 8001f44:	460c      	mov	r4, r1
 8001f46:	6831      	ldr	r1, [r6, #0]
 8001f48:	4605      	mov	r5, r0
 8001f4a:	b911      	cbnz	r1, 8001f52 <sbrk_aligned+0x12>
 8001f4c:	f000 f8a4 	bl	8002098 <_sbrk_r>
 8001f50:	6030      	str	r0, [r6, #0]
 8001f52:	4621      	mov	r1, r4
 8001f54:	4628      	mov	r0, r5
 8001f56:	f000 f89f 	bl	8002098 <_sbrk_r>
 8001f5a:	1c43      	adds	r3, r0, #1
 8001f5c:	d00a      	beq.n	8001f74 <sbrk_aligned+0x34>
 8001f5e:	1cc4      	adds	r4, r0, #3
 8001f60:	f024 0403 	bic.w	r4, r4, #3
 8001f64:	42a0      	cmp	r0, r4
 8001f66:	d007      	beq.n	8001f78 <sbrk_aligned+0x38>
 8001f68:	1a21      	subs	r1, r4, r0
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f000 f894 	bl	8002098 <_sbrk_r>
 8001f70:	3001      	adds	r0, #1
 8001f72:	d101      	bne.n	8001f78 <sbrk_aligned+0x38>
 8001f74:	f04f 34ff 	mov.w	r4, #4294967295
 8001f78:	4620      	mov	r0, r4
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	20000118 	.word	0x20000118

08001f80 <_malloc_r>:
 8001f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f84:	1ccd      	adds	r5, r1, #3
 8001f86:	f025 0503 	bic.w	r5, r5, #3
 8001f8a:	3508      	adds	r5, #8
 8001f8c:	2d0c      	cmp	r5, #12
 8001f8e:	bf38      	it	cc
 8001f90:	250c      	movcc	r5, #12
 8001f92:	2d00      	cmp	r5, #0
 8001f94:	4607      	mov	r7, r0
 8001f96:	db01      	blt.n	8001f9c <_malloc_r+0x1c>
 8001f98:	42a9      	cmp	r1, r5
 8001f9a:	d905      	bls.n	8001fa8 <_malloc_r+0x28>
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	4630      	mov	r0, r6
 8001fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800207c <_malloc_r+0xfc>
 8001fac:	f000 f868 	bl	8002080 <__malloc_lock>
 8001fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	bb5c      	cbnz	r4, 8002010 <_malloc_r+0x90>
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4638      	mov	r0, r7
 8001fbc:	f7ff ffc0 	bl	8001f40 <sbrk_aligned>
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	d155      	bne.n	8002072 <_malloc_r+0xf2>
 8001fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8001fca:	4626      	mov	r6, r4
 8001fcc:	2e00      	cmp	r6, #0
 8001fce:	d145      	bne.n	800205c <_malloc_r+0xdc>
 8001fd0:	2c00      	cmp	r4, #0
 8001fd2:	d048      	beq.n	8002066 <_malloc_r+0xe6>
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	4638      	mov	r0, r7
 8001fda:	eb04 0903 	add.w	r9, r4, r3
 8001fde:	f000 f85b 	bl	8002098 <_sbrk_r>
 8001fe2:	4581      	cmp	r9, r0
 8001fe4:	d13f      	bne.n	8002066 <_malloc_r+0xe6>
 8001fe6:	6821      	ldr	r1, [r4, #0]
 8001fe8:	1a6d      	subs	r5, r5, r1
 8001fea:	4629      	mov	r1, r5
 8001fec:	4638      	mov	r0, r7
 8001fee:	f7ff ffa7 	bl	8001f40 <sbrk_aligned>
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	d037      	beq.n	8002066 <_malloc_r+0xe6>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	442b      	add	r3, r5
 8001ffa:	6023      	str	r3, [r4, #0]
 8001ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d038      	beq.n	8002076 <_malloc_r+0xf6>
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	42a2      	cmp	r2, r4
 8002008:	d12b      	bne.n	8002062 <_malloc_r+0xe2>
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	e00f      	b.n	8002030 <_malloc_r+0xb0>
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	1b52      	subs	r2, r2, r5
 8002014:	d41f      	bmi.n	8002056 <_malloc_r+0xd6>
 8002016:	2a0b      	cmp	r2, #11
 8002018:	d917      	bls.n	800204a <_malloc_r+0xca>
 800201a:	1961      	adds	r1, r4, r5
 800201c:	42a3      	cmp	r3, r4
 800201e:	6025      	str	r5, [r4, #0]
 8002020:	bf18      	it	ne
 8002022:	6059      	strne	r1, [r3, #4]
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	bf08      	it	eq
 8002028:	f8c8 1000 	streq.w	r1, [r8]
 800202c:	5162      	str	r2, [r4, r5]
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	4638      	mov	r0, r7
 8002032:	f104 060b 	add.w	r6, r4, #11
 8002036:	f000 f829 	bl	800208c <__malloc_unlock>
 800203a:	f026 0607 	bic.w	r6, r6, #7
 800203e:	1d23      	adds	r3, r4, #4
 8002040:	1af2      	subs	r2, r6, r3
 8002042:	d0ae      	beq.n	8001fa2 <_malloc_r+0x22>
 8002044:	1b9b      	subs	r3, r3, r6
 8002046:	50a3      	str	r3, [r4, r2]
 8002048:	e7ab      	b.n	8001fa2 <_malloc_r+0x22>
 800204a:	42a3      	cmp	r3, r4
 800204c:	6862      	ldr	r2, [r4, #4]
 800204e:	d1dd      	bne.n	800200c <_malloc_r+0x8c>
 8002050:	f8c8 2000 	str.w	r2, [r8]
 8002054:	e7ec      	b.n	8002030 <_malloc_r+0xb0>
 8002056:	4623      	mov	r3, r4
 8002058:	6864      	ldr	r4, [r4, #4]
 800205a:	e7ac      	b.n	8001fb6 <_malloc_r+0x36>
 800205c:	4634      	mov	r4, r6
 800205e:	6876      	ldr	r6, [r6, #4]
 8002060:	e7b4      	b.n	8001fcc <_malloc_r+0x4c>
 8002062:	4613      	mov	r3, r2
 8002064:	e7cc      	b.n	8002000 <_malloc_r+0x80>
 8002066:	230c      	movs	r3, #12
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4638      	mov	r0, r7
 800206c:	f000 f80e 	bl	800208c <__malloc_unlock>
 8002070:	e797      	b.n	8001fa2 <_malloc_r+0x22>
 8002072:	6025      	str	r5, [r4, #0]
 8002074:	e7dc      	b.n	8002030 <_malloc_r+0xb0>
 8002076:	605b      	str	r3, [r3, #4]
 8002078:	deff      	udf	#255	; 0xff
 800207a:	bf00      	nop
 800207c:	20000114 	.word	0x20000114

08002080 <__malloc_lock>:
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <__malloc_lock+0x8>)
 8002082:	f000 b843 	b.w	800210c <__retarget_lock_acquire_recursive>
 8002086:	bf00      	nop
 8002088:	20000258 	.word	0x20000258

0800208c <__malloc_unlock>:
 800208c:	4801      	ldr	r0, [pc, #4]	; (8002094 <__malloc_unlock+0x8>)
 800208e:	f000 b83e 	b.w	800210e <__retarget_lock_release_recursive>
 8002092:	bf00      	nop
 8002094:	20000258 	.word	0x20000258

08002098 <_sbrk_r>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4d06      	ldr	r5, [pc, #24]	; (80020b4 <_sbrk_r+0x1c>)
 800209c:	2300      	movs	r3, #0
 800209e:	4604      	mov	r4, r0
 80020a0:	4608      	mov	r0, r1
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	f7ff fee4 	bl	8001e70 <_sbrk>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_sbrk_r+0x1a>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_sbrk_r+0x1a>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000254 	.word	0x20000254

080020b8 <__errno>:
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <__errno+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000054 	.word	0x20000054

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4d0d      	ldr	r5, [pc, #52]	; (80020fc <__libc_init_array+0x38>)
 80020c8:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <__libc_init_array+0x3c>)
 80020ca:	1b64      	subs	r4, r4, r5
 80020cc:	10a4      	asrs	r4, r4, #2
 80020ce:	2600      	movs	r6, #0
 80020d0:	42a6      	cmp	r6, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	4d0b      	ldr	r5, [pc, #44]	; (8002104 <__libc_init_array+0x40>)
 80020d6:	4c0c      	ldr	r4, [pc, #48]	; (8002108 <__libc_init_array+0x44>)
 80020d8:	f000 f81a 	bl	8002110 <_init>
 80020dc:	1b64      	subs	r4, r4, r5
 80020de:	10a4      	asrs	r4, r4, #2
 80020e0:	2600      	movs	r6, #0
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ec:	4798      	blx	r3
 80020ee:	3601      	adds	r6, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f6:	4798      	blx	r3
 80020f8:	3601      	adds	r6, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	0800225c 	.word	0x0800225c
 8002100:	0800225c 	.word	0x0800225c
 8002104:	0800225c 	.word	0x0800225c
 8002108:	08002260 	.word	0x08002260

0800210c <__retarget_lock_acquire_recursive>:
 800210c:	4770      	bx	lr

0800210e <__retarget_lock_release_recursive>:
 800210e:	4770      	bx	lr

08002110 <_init>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	bf00      	nop
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr

0800211c <_fini>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr
